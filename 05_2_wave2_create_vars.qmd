---
title: "05_2_wave2_create_vars"
format: html
editor: source
---

# Setup

```{r}
#| include: false
library(tidyverse)
library(sf)
library(data.table)
library(janitor)
library(fs)
library(cancensus)
library(tmap)
library(DataExplorer)
library(patchwork)
library(mapview)
library(rio)
```

```{r}
# data.table optimization
# details > https://jangorecki.gitlab.io/data.cube/library/data.table/html/datatable-optimize.html
options(datatable.optimize=Inf)
# notations
`%nin%` = Negate(`%in%`)

`%nlike%` = Negate(`%like%`)
```

# Read data

## Survey data
```{r readdata}
#| include: false
# survey filtered data
df_full <- data.table::fread("data/wave2_unified_data/JoinedData_17_11_2023_raw.csv")
df_full <- janitor::clean_names(df_full)

df_dictionary <- rio::import("data/wave2_unified_data/Final_Data_Dictionary_Both_Waves.xlsx")

load(file = "data/survey_filter_cd.RData")
wave1_filtered <- survey_filter_cd
rm(survey_filter_cd)

# wave 1 data raw (to check number of observations)
df_montreal <- data.table::fread("data/MontrealRawData_2023_08_24.csv") %>% 
  janitor::clean_names()
```

## Montreal shapes

<!-- ```{r} -->
<!-- #| include: false -->
<!-- # montreal fsa -->
<!-- montreal_fsa <- sf::st_read("data/report/montreal_fsa_count.gpkg") -->
<!-- # montreal cd (ct) -->
<!-- montreal_cd_ct <- sf::st_read("data/report/montreal_cd_ct_count.gpkg") -->
<!-- # montreal split -->
<!-- montreal_split <- sf::st_read("data/montreal_split/RA_CBC_EOD18.shp") %>%  -->
<!--   janitor::clean_names() -->
<!-- ``` -->

## Filter data

### Create id variable

For now, use response_id as an id variable.
The original dataset (df_montreal) is `data/MontrealRawData_2023_08_24.csv`. 
It was the basis for the filtered dataset used on report 1 `data/survey_filter_cd.RData`.

The variable previously used as id var (v1) are not the same in the original dataset (df_montreal) and the new one containing both waves (df_full).
Thus, using a new id variable is warranted. 

`response_id` will be the variable chosen. 
It has a duplicated row on the new dataset, which will be removed.

```{r}

# find duplicates in dffull (by response_id)
setDT(df_full)[duplicated(response_id), cbind(.SD[1], number = .N), by = response_id]
# duplicate response id: R_24jxMpJLejK0Hia

# identify duplicate rows
dup <- df_full %>% filter(response_id=="R_24jxMpJLejK0Hia") %>% count(v1)
# dup rows (v1): 1423 and 1424

d1423 <- df_full %>% 
  filter(v1==1423) %>% 
  select(-v1)

d1424 <- df_full %>% 
  filter(v1==1424) %>% 
  select(-v1)

# the code below compares the datasets to check if there are any mismatches on them. they are only present in the variables related to the recorded time the survey was answered
all.equal(
  d1423 %>% select(-c(v2_start_date, v2_end_date,v2_duration_in_seconds, v2_recorded_date))
  , d1424 %>% select(-c(v2_start_date,v2_end_date,v2_duration_in_seconds, v2_recorded_date)) 
  )

# remove second duplicate row 1424
df_full <- df_full %>% 
  filter(v1!=1424)

rm(d1423,d1424,dup)

#
df_full <- df_full %>% 
  relocate(response_id)

wave1_filtered <- wave1_filtered %>% 
  relocate(response_id)

df_montreal <- df_montreal %>% 
  relocate(response_id)

```


Filter by the individuals that we were able to geocode in the first wave of analysis
```{r}
df_full <- df_full %>% 
  filter(response_id %in% wave1_filtered$response_id)

# remove response id v2
df_full <- df_full %>% 
  select(-v2_response_id)
```


## Translated data

```{r readjointranslated}
# first wave of translated text
f_join_translated <- function(){
  
  df_translated_q45_21 <- data.table::fread("data/translated_q45_21_newidvar.csv")

  df_translated_q21_14_text <-
    data.table::fread("data/translated_q21_14_text_newidvar.csv")
  
  
  df_trans_1 <- dplyr::left_join(
    df_translated_q45_21 %>% select(-q45_21_text)
    , df_translated_q21_14_text %>% select(-q21_14_text)
    , by = "response_id"
  ) %>% 
    mutate(wave = "First") %>% 
    relocate("wave", .after = "response_id") %>% 
    mutate(across(where(is.character), ~na_if(., "")))
  
  df_translated_v2_q45_21 <- data.table::fread("data/translated_v2_q45_21.csv")
  df_translated_v2_q21_14_text <- data.table::fread("data/translated_v2_q21_14_text.csv")
  
  df_trans_2 <- dplyr::left_join(
    df_translated_v2_q45_21 %>% select(-v2_q45_21_text)
    , df_translated_v2_q21_14_text %>% select(-v2_q21_14_text)
    , by = "response_id"
  ) %>% 
    mutate(wave = "Second") %>% 
    relocate("wave", .after = "response_id") %>% 
    rename_with(~str_remove(., "^v2_")) %>% 
    mutate(across(where(is.character), ~na_if(., ""))) %>% 
    mutate(across(q45_21_trans, ~na_if(., "0")))
  
  df_trans_bind <- bind_rows(df_trans_1,df_trans_2)
  
}

df_trans_bind <- f_join_translated()
```


<!-- ```{r } -->
<!-- # first wave of translated text -->
<!-- f_join_translated <- function(df){ -->

<!--   df_translated_q45_21 <- data.table::fread("data/translated_q45_21.csv") -->

<!--   df_translated_q21_14_text <- data.table::fread("data/translated_q21_14_text.csv") -->
<!--   setnames(df_translated_q21_14_text -->
<!--            ,old = "q21_14_text_trans" -->
<!--            , new = "q21_14_trans") -->

<!--   df <- df %>%  -->
<!--     dplyr::left_join(df_translated_q45_21 %>% select(-q45_21_text), by = "response_id") %>% -->
<!--     dplyr::left_join(df_translated_q21_14_text %>% select(-q21_14_text), by = "response_id") -->
<!-- } -->

<!-- df_full <- f_join_translated(df_full) -->

<!-- # first wave of translated text -->
<!-- f_join_translated_v2 <- function(df){ -->

<!--   df_translated_v2_q45_21 <- data.table::fread("data/translated_v2_q45_21.csv") -->

<!--   df_translated_v2_q21_14_text <- data.table::fread("data/translated_v2_q21_14_text.csv") -->

<!--   df <- df %>%  -->
<!--     dplyr::left_join(df_translated_v2_q45_21 %>% select(-v2_q45_21_text), by = "response_id") %>% -->
<!--     dplyr::left_join(df_translated_v2_q21_14_text %>% select(-v2_q21_14_text), by = "response_id") -->
<!-- } -->


<!-- df_full <- f_join_translated_v2(df_full) -->
<!-- ``` -->

# f_unique_sort
```{r}
f_unique_sort <- function(df, var1){
  df %>% 
    dplyr::pull({{var1}}) %>% 
    unique() %>%
    sort()
}
```

# Response rate

```{r}
# v2_start_date (now start date)
df_response_rate <- df_full %>% 
  select(response_id, v2_start_date) %>% 
  mutate(response_rate = as_factor(case_when(
    !is.na(v2_start_date) ~ "Start wave 2"
    , .default = "Did not start wave 2"
  ))) %>% 
  select(-v2_start_date)
```

# Div Two time periods (waves)

```{r}
df_wave1 <- df_full %>% select(response_id:q75_1)
df_wave1 <- df_wave1 %>% 
  mutate(wave = "First") %>% 
  relocate("wave", .after = "response_id")



df_wave2 <- df_full %>% select(response_id, starts_with("v2"))
df_wave2 <- df_wave2 %>% 
  rename_with(~str_remove(., "^v2_")) %>% 
  mutate(wave = "Second") %>% 
  relocate("wave", .after = "response_id")

# find which columns are present in one df, and not in the other
# present in wave 1 but not in wave 2
cols_wave1only <- setdiff(colnames(df_wave1), colnames(df_wave2))
# present in wave 2 but not in wave 1
cols_wave2only <- setdiff(colnames(df_wave2), colnames(df_wave1))

cols_wave2only <- paste0("v2_", cols_wave2only)

df_wave1_only <- df_full %>% 
  select(response_id, all_of(cols_wave1only))

df_wave2_only <- df_full %>% 
  select(response_id, all_of(cols_wave2only)) %>% 
  rename_with(~str_remove(., "^v2_"))

# add wave column on wave2_only df (so that questions refered to wave 2 are exclusive to that period)
df_wave2_only <- df_wave2_only %>% 
  mutate(wave = "Second") %>% 
  relocate("wave", .after = "response_id")

cols_wave2only <- stringr::str_remove(cols_wave2only, "v2_")

```


## Create vars from wave 1 only

```{r}
pattern_vis_minority_q48 <- "Southeast Asian origins|South Asian origins|Northeast Asian origins|West Asian origins|Caribbean origins|Latin, Central and South American origins|African origins|Arabic origins/North African origins"

pattern_vis_minority_q48_28_text <- "Arabe dâ€™Egypte|Egyptian|Kabyle|Lebanese|Libanais|Libanaise|Philippines"
# are acadienne visible minority?

df_wave1_only <- df_wave1_only %>% 
  mutate(
    # gender
    , gender = as_factor(case_when(
      q41 == "Man" ~ "Male"
      , q41 == "Woman" ~ "Female"
      , q41 %in% c("Non-binary", "Another gender identity, please specify:") ~ 
        "Other"
      , .default = NA_character_
    ))
    # age raw
    , age_raw = case_when(
      q40 == "1923 or earlier" ~ 2023L - 1923L
      ,q40 == "1930" ~ 2023L - 1930L
      ,q40 == "1935" ~ 2023L - 1935L
      ,q40 == "1937" ~ 2023L - 1937L
      ,q40 == "1938" ~ 2023L - 1938L
      ,q40 == "1939" ~ 2023L - 1939L
      ,q40 == "1940" ~ 2023L - 1940L
      ,q40 == "1941" ~ 2023L - 1941L
      ,q40 == "1942" ~ 2023L - 1942L
      ,q40 == "1943" ~ 2023L - 1943L
      ,q40 == "1944" ~ 2023L - 1944L
      ,q40 == "1945" ~ 2023L - 1945L
      ,q40 == "1946" ~ 2023L - 1946L
      ,q40 == "1947" ~ 2023L - 1947L
      ,q40 == "1948" ~ 2023L - 1948L
      ,q40 == "1949" ~ 2023L - 1949L
      ,q40 == "1950" ~ 2023L - 1950L
      ,q40 == "1951" ~ 2023L - 1951L
      ,q40 == "1952" ~ 2023L - 1952L
      ,q40 == "1953" ~ 2023L - 1953L
      ,q40 == "1954" ~ 2023L - 1954L
      ,q40 == "1955" ~ 2023L - 1955L
      ,q40 == "1956" ~ 2023L - 1956L
      ,q40 == "1957" ~ 2023L - 1957L
      ,q40 == "1958" ~ 2023L - 1958L
      ,q40 == "1959" ~ 2023L - 1959L
      ,q40 == "1960" ~ 2023L - 1960L
      ,q40 == "1961" ~ 2023L - 1961L
      ,q40 == "1962" ~ 2023L - 1962L
      ,q40 == "1963" ~ 2023L - 1963L
      ,q40 == "1964" ~ 2023L - 1964L
      ,q40 == "1965" ~ 2023L - 1965L
      ,q40 == "1966" ~ 2023L - 1966L
      ,q40 == "1967" ~ 2023L - 1967L
      ,q40 == "1968" ~ 2023L - 1968L
      ,q40 == "1969" ~ 2023L - 1969L
      ,q40 == "1970" ~ 2023L - 1970L
      ,q40 == "1971" ~ 2023L - 1971L
      ,q40 == "1972" ~ 2023L - 1972L
      ,q40 == "1973" ~ 2023L - 1973L
      ,q40 == "1974 or later" ~ 2023L - 1974L
      , .default = NA_integer_
    )
    # age corrected
    , age_corrected = case_when(
      # q4 == "50-64" & age_raw == 65L ~ 64L
        q4 == "50-64" & q40 == "1974 or later" ~ 50L
      , q4 == "65 and older" & q40 == "1974 or later" ~ 50L
      , q4 == "50-64" & q40 == "1958" ~ 64L
      , .default = age_raw
    )
    # age categories
    , age_groups_5 = as_factor(case_when(
      age_corrected < 50L ~ "age_less_50"
      , age_corrected >= 50L & age_corrected <= 54L ~ "age_50_54"
      , age_corrected >= 55L & age_corrected <= 59L ~ "age_55_59"
      , age_corrected >= 60L & age_corrected <= 64L ~ "age_60_64"
      , age_corrected >= 65L ~ "age_65_over" 
      , .default = NA_character_
    ))
    , age_groups_5_all = as_factor(case_when(
      age_corrected < 50L ~ "age_less_50"
      , age_corrected >= 50L & age_corrected <= 54L ~ "age_50_54"
      , age_corrected >= 55L & age_corrected <= 59L ~ "age_55_59"
      , age_corrected >= 60L & age_corrected <= 64L ~ "age_60_64"
      , age_corrected >= 65L & age_corrected <= 69L ~ "age_65_69"
      , age_corrected >= 70L & age_corrected <= 74L ~ "age_70_74"
      , age_corrected >= 75L & age_corrected <= 79L ~ "age_75_79"
      , age_corrected >= 80L & age_corrected <= 84L ~ "age_80_84"
      , age_corrected >= 85L & age_corrected <= 89L ~ "age_85_89"
      , age_corrected >= 90L ~ "age_90_over"
      , .default = NA_character_
    ))
    , age_groups_control_treat = case_when(
      age_corrected < 50L ~ "age_less_50"
      , age_corrected >= 50L & age_corrected <= 64L ~ "Control (50-64)"
      , age_corrected >= 65L ~ "Treatment (65-over)" 
      , q40 == "Prefer not to answer" & q4 == "50-64" ~ "Control (50-64)"
      , q40 == "Prefer not to answer" & q4 == "65 and older" ~ "Treatment (65-over)"
      , .default = NA_character_
    )
    
    # visible minority 
    # https://www23.statcan.gc.ca/imdb/p3Var.pl?Function=DECI&Id=257515
    , visible_minority = as_factor(case_when(
      stringr::str_detect(
        string = q48
        , pattern = pattern_vis_minority_q48
        ) |
        stringr::str_detect(
          string = q48_28_text
          , pattern_vis_minority_q48_28_text
          ) ~ "Visible minority"
      , stringr::str_detect(
        string = q48
        , pattern = "Native North American origins"
      ) ~ "Native NA origins"
      , stringr::str_detect(
        string = q48
        , pattern = "I prefer not to answer"
        ) | is.na(q48) ~ NA_character_
      , .default = "Non-visible minority"
    ))
    
    , educ_has_postsec = as_factor(case_when(
      str_detect(string = q43 , pattern = "College|CEGEP|Bachelor|Master") ~
        "Yes"
      , str_detect(string = q43 , pattern = "Primary|High") ~
        "No"
      , T ~ NA_character_
    ))
    , immigrant = as_factor(case_when(
      q79 == "Born here " ~ "No"
      , q79 == "Prefer not to answer" | is.na(q79) ~ NA_character_
      , .default = "Yes"
    ))    
    , firstnations_metis_inuit = as_factor(case_when(
      q47 == "No" ~ "No"
      , q47 == "Prefer not to answer" ~ NA_character_
      , .default = "Yes"
    ))    
  )
```

## Join waves

```{r}
f_join_waves <- function(){
  
  a <- df_wave1 %>% select(-all_of(cols_wave1only))
  b <- df_wave2 %>% select(-all_of(cols_wave2only))
  data.table::setcolorder(b, neworder = names(a))  
  
  # Col bind wave 1 and 2
  df_both <- bind_rows(a,b)
  
  # add wave 1 columns
  df_both <- dplyr::left_join(df_both,df_wave1_only, by = "response_id") 
  
  # wave 2 only (must use response_id and wave as by arguments)
  df_both <- dplyr::left_join(
    df_both, df_wave2_only, by = c("response_id", "wave")
    )
  
  # add translated
  df_both <- df_both %>% 
  dplyr::left_join(df_trans_bind, by = c("response_id", "wave"))
  
  # add response rate
  df_both <- df_both %>%
    dplyr::left_join(df_response_rate, by = "response_id")
  
}

df_both <- f_join_waves()

```



!ATENTION: WHEN DEALING WITH df_both, remember to filter by wave (so there's no double count)!


# Create vars


## Survey


### Demographics

```{r}
# replace "" with NA from all columns
df_both <- df_both %>% 
  mutate(
    across(where(is.character)
      , ~na_if(., ""))
    )

# remove whitespace form string
df_both <- df_both %>% 
  mutate(q48_28_text = stringr::str_trim(q48_28_text))

```


```{r createvarsdemographics}


df_both <- df_both %>% 
  mutate(
    income_groups = as_factor(case_when(
      q31 == "I prefer not to answer" ~ NA_character_
      , .default = str_trim(q31)
    ))
    # income midpoint
    ,income_midpoint = case_when(
      q31 == "Less than $15,000" ~ 15000/2
      , q31 == "$15,000 to $29,999 " ~ (15000 + 30000)/2
      , q31 == "$30,000 to $59,999" ~ (30000 + 60000)/2
      , q31 == "$60,000 to $89,999 " ~ (60000 + 90000)/2
      , q31 == "$90,000 to $119,999 " ~ (90000 + 120000)/2
      , q31 == "$120,000 to $149,999 " ~ (120000 + 150000)/2
      , q31 == "$150,000 to $179,999 " ~ (150000 + 180000)/2
      , q31 == "$180,000 to $209,999 " ~ (180000 + 210000)/2
      , q31 == "$210,000 or more" ~ 210000
      , .default = NA_integer_
    )
    # household size
    , household_size = case_when(
      q106 == "1" ~ 1
      , q106 == "2" ~ 2
      , q106 == "3" ~ 3
      , q106 == "4" ~ 4
      , q106 == "5" ~ 5
      , q106 == "6" ~ 6
      , q106 == "8" ~ 8
      , q106 == "10 or more" ~ 10
      , .default = NA_integer_
    )
    # https://www12.statcan.gc.ca/census-recensement/2021/ref/dict/tab/index-eng.cfm?ID=t2_4
    # before tax threshold
    , lim_threshold = case_when(
      household_size == 1L ~ 30401
      , household_size == 2L ~ 42993
      , household_size == 3L ~ 52655
      , household_size == 4L ~ 60801
      , household_size == 5L ~ 67978
      , household_size == 6L ~ 74466
      , household_size == 8L ~ 85987
      , household_size == 10L ~ 96136
      , .default = NA_integer_
    )
    # in lim
    # https://www12.statcan.gc.ca/census-recensement/2021/ref/dict/tab/index-eng.cfm?ID=t2_4
    , in_lim = as_factor(case_when(
      income_midpoint < lim_threshold ~ "Yes"
      , income_midpoint >= lim_threshold ~ "No"
      , .default = NA_character_
    ))
    
    , vehicles_per_capita = case_when(
      q39 == "0" ~ 0
      , q39 == "1" ~ 1/household_size
      , q39 == "2" ~ 2/household_size
      , q39 == "3" ~ 3/household_size
      , q39 == "4+" ~ 4/household_size
      , .default = NA_integer_
    )
    , has_vehicle_household = as_factor(case_when(
      q39 == "0" ~ "No"
      , q39 == "Prefer not to answer" | is.na(q39) ~ NA_character_
      , .default = "Yes"
    ))
    # check if "" means skipped or 
    , lone_household = as_factor(case_when(
      household_size == 1 ~ "Yes"
      , is.na(household_size) ~ NA_character_
      , .default = "No"
    ))
    
    , employment = as_factor(case_when(
      str_detect(string = q45, pattern = "Unemployed") ~ "Unemployed"
      , str_detect(string = q45, pattern = "Employed full-time") |
        str_detect(string = q45_21_trans, pattern = "Self-employed")
        ~ "Employed full-time"
      , str_detect(string = q45, pattern = "Employed part-time") ~ "Employed part-time"
      , str_detect(string = q45, pattern = "Retired") ~ "Retired"
      , str_detect(string = q45, pattern = "Full-time parent/homemaker") ~ "Full-time parent/homemaker"
      # , stringr::str_detect(string = q45_21_trans, regex("disability|disabled", ignore_case = TRUE)) ~ "Disability"
      , str_detect(string = q45_21_trans, regex("retired|retirement", ignore_case = T)) ~ "Retired"
      , str_detect(string = q45, pattern = "Prefer not to answer/I donâ€™t know") |
        is.na(q45) ~ NA_character_
      , .default = "Other"
    ))
    
    , employed = as_factor(case_when(
      employment == "Employed full-time" |
        employment == "Employed part-time" ~ "Yes"
      , employment == "Unemployed" |
        employment == "Retired" |
        employment == "Full-time parent/homemaker" |
        employment == "Other" ~ "No"
      , str_detect(string = q45, pattern = "Prefer not to answer/I donâ€™t know") |
        is.na(employment) ~ NA_character_
      , .default = "No"
    ))
    , unemployed = as_factor(case_when(
      str_detect(string = q45, pattern = "Unemployed") ~ "Yes"
      , str_detect(string = q45, pattern = "Prefer not to answer/I donâ€™t know") |
        is.na(q45) ~ NA_character_
      , .default = "No"
    ))
    , any_functional_limitation = as_factor(case_when(
      str_detect(string = q80, pattern = "No, I donâ€™t have any") ~ "No"
      , str_detect(string = q80, pattern = "I prefer not to answer") |
        is.na(q80) ~ NA_character_
      , .default = "Yes"
    ))
    , any_mobility_limitation = as_factor(case_when(
      str_detect(string = q80, pattern = "Mobility") ~ "Yes"
      , str_detect(string = q80, pattern = "I prefer not to answer") |
        is.na(q80) ~ NA_character_
      , .default = "No"
    ))
  )

```



### Travel behaviour

```{r createvarstravelbehaviour}
df_both <- df_both %>% 
  mutate(
      transit_once_week_plus = as_factor(case_when(
      q3 %in% c("1-2 days a week"
                , "3-4 days a week"
                , "5-7 days a week") ~ "Yes"
      , q3 == "Not Asked" | is.na(q3) ~ NA_character_
      , .default = "No"
    ))
    , last_7_mode_transit = as_factor(case_when(
      str_detect(string = q21, pattern = "(B|b)us|rail|Metro|Paratransit") |
        str_detect(string = q21_14_trans, "REM|River shuttle|Metro|Paratransit|STL bus|VIA train") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_mode_car = as_factor(case_when(
      str_detect(string = q21, pattern = "Own car|Carpooling|Carsharing") |
        str_detect(string = q21_14_trans, "Automotive|use it in summer|parent's car|Personal car") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_mode_active = as_factor(case_when(
      str_detect(string = q21, pattern = "Walking|Own bike|Self-service bike") |
        str_detect(string = q21_14_trans, "(w|W)alk|(b|B)icycle") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , awereness_free_pass = as_factor(case_when(
      q23 == "No" ~ "No"
      , q23 == "Yes" ~ "Yes"
      , .default = NA_character_
    ))
    , has_free_pass_wave1 = as_factor(case_when(
      q97 == "Yes" ~ "Yes"
      , q97 %in% c("No, but Iâ€™m not planning to get it", "No, but Iâ€™m planning to get it soon") ~ "No"
      , .default = NA_character_
    ))
    , has_free_pass_wave1_categories = as_factor(case_when(
      q97 %in% c("Prefer not to answer", "") ~ NA_character_ 
      , .default = q97
    ))
    # fare types (figure out how to code)
    , fare_type_before_pass_q98 = as_factor(case_when(
      str_detect(q98, "(1|2|10)-trip") ~ "Limited daily"
      , str_detect(q98, "Unlimited|24-hr") ~ "Unlimited daily"
      , str_detect(q98, "3-day|Weekly") ~ "3-day or weekly"
      , str_detect(q98, regex("month", ignore_case = T)) ~ "Monthly or more"
      , str_detect(q98, "Other") ~ "Other"
      , .default = NA_character_
    ))
    , fare_type_before_pass_q99 = as_factor(case_when(
      str_detect(q99, "(1|2|10)-trip") ~ "Limited daily"
      , str_detect(q99, "Unlimited|24-hr") ~ "Unlimited daily"
      , str_detect(q99, "3-day|Weekly") ~ "3-day or weekly"
      , str_detect(q99, regex("month", ignore_case = T)) ~ "Monthly or more"
      , str_detect(q99, "Other") ~ "Other"
      , .default = NA_character_
    ))    
    , rides_transit_as_would_like = as_factor(case_when(
      # q100 %in% c("", "Prefer not to answer") ~ NA_character_
      q100 == "Yes" ~ "Yes"
      , q100 == "No" ~ "No"
      , .default = NA_character_
    ))
    
    # transit barriers q25
    , transit_barrier_too_long = as.factor(case_when(
      str_detect(string = q25, pattern = "Takes too long") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_not_reliable = as.factor(case_when(
      str_detect(string = q25, pattern = "not reliable") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_not_frequent = as.factor(case_when(
      str_detect(string = q25, pattern = "Service is not frequent enough") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_lack_capilarity = as.factor(case_when(
      str_detect(string = q25, pattern = "Service doesnâ€™t go where I need it") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_isnt_available = as.factor(case_when(
      str_detect(string = q25, pattern = "Service isnâ€™t available when I need it") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_not_worth = as.factor(case_when(
      str_detect(string = q25, pattern = "Itâ€™s not worth the cost ") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_cant_afford = as.factor(case_when(
      str_detect(string = q25, pattern = "I canâ€™t afford it") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_cost_related = as.factor(case_when(
      str_detect(string = q25, pattern = "I canâ€™t afford it|Itâ€™s not worth the cost ") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    , transit_barrier_crowded = as.factor(case_when(
      str_detect(string = q25, pattern = "Too crowded") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    , transit_barrier_unsafe = as.factor(case_when(
      str_detect(string = q25, pattern = "unsafe") ~ "Yes"
      , str_detect(string = q25, pattern = "^$|Prefer not to answer") |
        is.na(q25) ~ NA_character_
      , .default = "No"
    ))
    
    # CONTINUE LATER
    
    
    , has_cost_prevented_transit = as.factor(case_when(
      q101 == "Yes" ~ "Yes"
      , q101 == "No" ~ "No"
      , .default = NA_character_
    ))
    
    , when_cost_transport_barrier = as_factor(case_when(
      # q26 %in% c("Today or yesterday", "In the last week") ~ "Within last week"
      q26 %in% c("Prefer not to answer") | is.na(q26) ~ NA_character_
      , .default = q26
    ))
    , suppressed_trip_alterantive_mode = as_factor(case_when(
      q27 %in% c("Own bike","Self-service bike (BIXI, JUMP, etc.)","Walking") ~ "Active"
      , q27 %in% c("Own car"
                   ,"Car-sharing (Communauto, Car2go, etc.)"
                   , "Carpooling") ~ "Car"
      , q27 == "Did not make trip" ~ "Suppressed trip"
      , q27 %in% c("Prefer not to answer") | is.na(q27) ~ NA_character_
      , .default = 'Other'
    ))
    , suppressed_trip_dest = case_when(
      q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = q28
    )
    , suppresed_dest_work = as_factor(case_when(
      q28 == "Work" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_school = as_factor(case_when(
      q28 == "Attend school, training, or job seeking" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_food = as_factor(case_when(
      q28 == "Food (grocery, food bank)" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_errands = as_factor(case_when(
      q28 == "Personal Errands (haircut, vet, banking)" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_recreation = as_factor(case_when(
      q28 == "Recreation or entertainment (park, gym, movies)" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_family_friends = as_factor(case_when(
      q28 == "Visit with family or friends" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_health = as_factor(case_when(
      q28 == "Medical or health-related appointments" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_community_events = as_factor(case_when(
      q28 == "Attend community events (i.e., club, church, etc. â€¦)" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_accompany = as_factor(case_when(
      q28 == "Taking someone else somewhere (i.e. caregiving)" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , suppresed_dest_volunteer = as_factor(case_when(
      q28 == "Volunteering" ~ "Yes"
      , q28 == "Prefer not to answer" | is.na(q28) ~ NA_character_
      , .default = "No"
    ))
    , confident_transit = as_factor(case_when(
      q102_5 %in% c("Agree", "Strongly Agree") ~ "Yes"
      , q102_5 %in% c("Disagree", "Strongly Disagree") ~ "No"
      , q102_5 %in% c("Neither agree nor disagree") ~ "Neither"
      , .default = NA_character_
    ))
    , satisfied_transit = as_factor(case_when(
      q109_1 %in% c("Agree", "Strongly Agree") ~ "Yes"
      , q109_1 %in% c("Disagree", "Strongly Disagree") ~ "No"
      , q109_1 %in% c("Neither agree nor disagree") ~ "Neither"
      , .default = NA_character_
    ))
    , satisfaction_seeing_friends_family = as_factor(case_when(
      q109_3 %in% c("Agree", "Strongly Agree") ~ "Satisfied"
      , q109_3 %in% c("Disagree", "Strongly Disagree") ~ "Dissatisfied"
      , q109_3 %in% c("Neither agree nor disagree") ~ "Neither"
      , .default = NA_character_
    ))
    , satisfaction_recreation = as_factor(case_when(
      q109_4 %in% c("Agree", "Strongly Agree") ~ "Satisfied"
      , q109_4 %in% c("Disagree", "Strongly Disagree") ~ "Dissatisfied"
      , q109_4 %in% c("Neither agree nor disagree") ~ "Neither"
      , .default = NA_character_
    ))
    , satisfaction_community_events = as_factor(case_when(
      q109_5 %in% c("Agree", "Strongly Agree") ~ "Satisfied"
      , q109_5 %in% c("Disagree", "Strongly Disagree") ~ "Dissatisfied"
      , q109_5 %in% c("Neither agree nor disagree") ~ "Neither"
      , .default = NA_character_
    ))
    , satisfaction_activity_participation = as_factor(case_when(
      satisfaction_seeing_friends_family == "Satisfied" &
        satisfaction_recreation == "Satisfied" &
        satisfaction_community_events == "Satisfied" ~ "Satisfied"
      , satisfaction_seeing_friends_family == "Dissatisfied" |
        satisfaction_recreation == "Dissatisfied" |
        satisfaction_community_events == "Dissatisfied" ~ "Dissatisfied"
      , is.na(satisfaction_seeing_friends_family) &
        is.na(satisfaction_recreation) &
        is.na(satisfaction_community_events) ~ NA_character_
      , .default = "Neither"
      # q109_3 %in% c("Agree", "Strongly Agree") &
      #   q109_4 %in% c("Agree", "Strongly Agree") &
      #   q109_5 %in% c("Agree", "Strongly Agree") ~ "Satisfied"
      # , q109_3 %in% c("Disagree", "Strongly Disagree") |
      #   q109_4 %in% c("Disagree", "Strongly Disagree") |
      #   q109_5 %in% c("Disagree", "Strongly Disagree") ~ "Dissatisfied"
      # , q109_3 %in% c("", "Prefer not to answer","Not applicable") &
      #   q109_4 %in% c("", "Prefer not to answer","Not applicable") &
      #   q109_5 %in% c("", "Prefer not to answer","Not applicable") ~ NA_character_
      # , .default = "Neither"
    ))
    , difficulty_transport_expenses = as_factor(case_when(
      q103 %in% c("Extremely difficult", "Somewhat difficult") ~ "Yes"
      , q103 %in% c("Extremely easy", "Somewhat easy") ~ "No"
      , q103 %in% c("Neither easy nor difficult") ~ "Neither"
      , .default = NA_character_
    ))
    , follow_up = as_factor(case_when(
      q20 %in% c("-99") | is.na(q20) ~ NA_character_
      , .default = q20
    ))
    , could_stop_driving = as_factor(case_when(
      q102_4 %in% c("Strongly Agree","Agree") ~ "Yes"
      , q102_4 %in% c("Strongly Disagree","Disagree") ~ "No"
      , q102_4 %in% c("Neither agree nor disagree") ~ "Neither"
      , .default = NA_character_
    ))
  )
```




### Cols from wave 2 only

Obs.: q112 and q114 are text. They need to be scrutinized qualitatively or with a methodology for this long answers in quantative studies purpose.

Obs.2: per q116, 27 people have moved since the first survey. The update of their spatial location need to be made in the future

Obs.: q104 is another qualitative question

```{r}
# col types from wave2
# df_both %>% select(cols_wave2only) %>% glimpse()
df_both <- df_both %>% 
  mutate(
    has_free_pass_wave2 = as.factor(case_when(
      q111 == "No" ~ "No"
      , q111 == "Yes" ~ "Yes"
      , .default = NA_character_
    ))
    , has_free_pass_improved_wave2 = as.factor(case_when(
      q115 == "No" ~ "No"
      , q115 == "Yes" ~ "Yes"
      , .default = NA_character_
    ))
  )

```




### Vars by mode_destination

```{r varsq22q96}
df_count <- df_both
df_count <- df_count %>% 
  select(c(response_id, wave, q21, q22_1:q94_10,q117_1:q117_10)) %>% 
  mutate(across(!c(response_id:q21), ~na_if(., -99L)))

df_count <- df_count %>% 
  rename_with(.fn = ~str_replace(., "^q22", "mode_stm_bus")) %>% 
  rename_with(.fn = ~str_replace(., "^q95", "mode_metro")) %>% 
  rename_with(.fn = ~str_replace(., "^q82", "mode_paratransit")) %>% 
  rename_with(.fn = ~str_replace(., "^q83", "mode_other_bus")) %>% 
  rename_with(.fn = ~str_replace(., "^q84", "mode_rail")) %>% 
  rename_with(.fn = ~str_replace(., "^q85", "mode_walk")) %>% 
  rename_with(.fn = ~str_replace(., "^q81", "mode_own_bike")) %>% 
  rename_with(.fn = ~str_replace(., "^q86", "mode_service_bike")) %>% 
  rename_with(.fn = ~str_replace(., "^q87", "mode_own_scooter")) %>% 
  rename_with(.fn = ~str_replace(., "^q88", "mode_service_scooter")) %>% 
  rename_with(.fn = ~str_replace(., "^q89", "mode_own_car")) %>% 
  rename_with(.fn = ~str_replace(., "^q90", "mode_carpooling")) %>% 
  rename_with(.fn = ~str_replace(., "^q91", "mode_carsharing")) %>% 
  rename_with(.fn = ~str_replace(., "^q92", "mode_taxi")) %>% 
  rename_with(.fn = ~str_replace(., "^q94", "mode_motorcycle")) %>% 
  rename_with(.fn = ~str_replace(., "^q117", "mode_rem"))


df_count <- df_count %>% 
  rename_with(.fn = ~str_replace(., "_1$", "_dest_work")) %>% 
  rename_with(.fn = ~str_replace(., "_2$", "_dest_school")) %>%
  rename_with(.fn = ~str_replace(., "_3$", "_dest_food")) %>%
  rename_with(.fn = ~str_replace(., "_4$", "_dest_errands")) %>%
  rename_with(.fn = ~str_replace(., "_5$", "_dest_recreation")) %>%
  rename_with(.fn = ~str_replace(., "_6$", "_dest_family_friends")) %>%
  rename_with(.fn = ~str_replace(., "_7$", "_dest_health")) %>%
  rename_with(.fn = ~str_replace(., "_8$", "_dest_community_events")) %>%
  rename_with(.fn = ~str_replace(., "_9$", "_dest_accompany")) %>%
  rename_with(.fn = ~str_replace(., "_10$", "_dest_volunteer"))

# create factor for each mode
df_count <- df_count %>% 
  mutate(
    last_7_stm_bus = as_factor(case_when(
      str_detect(string = q21, pattern = "STM bus") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_metro = as_factor(case_when(
      str_detect(string = q21, pattern = "Metro") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_paratransit = as_factor(case_when(
      str_detect(string = q21, pattern = "STM Paratransit") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_other_bus = as_factor(case_when(
      str_detect(string = q21, pattern = "Bus (not with the STM)") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_rail = as_factor(case_when(
      str_detect(string = q21, pattern = "Commuter rail") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_walk = as_factor(case_when(
      str_detect(string = q21, pattern = "Walking") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_own_bike = as_factor(case_when(
      str_detect(string = q21, pattern = "Own bike") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_own_scooter = as_factor(case_when(
      str_detect(string = q21, pattern = "Own scooter") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_service_bike = as_factor(case_when(
      str_detect(string = q21, pattern = "Self-service bike") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_service_scooter = as_factor(case_when(
      str_detect(string = q21, pattern = "Self-service scooter") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_own_car = as_factor(case_when(
      str_detect(string = q21, pattern = "Own car") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_carpooling = as_factor(case_when(
      str_detect(string = q21, pattern = "Carpooling") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_carsharing = as_factor(case_when(
      str_detect(string = q21, pattern = "Carsharing") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_taxi = as_factor(case_when(
      str_detect(string = q21, pattern = "Taxi") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_motorcycle = as_factor(case_when(
      str_detect(string = q21, pattern = "Motorcycle") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
    , last_7_rem = as_factor(case_when(
      str_detect(string = q21, pattern = "The REM") ~ "Yes"
      , is.na(q21) ~ NA_character_
      , .default = "No"
    ))
  )
  
```

```{r checkcodedmissingvalues}
# check if -99 values in q22_1:q96_10 are missing values (NA) or zero
# for MJ's presentation: wasn't able to automate coding
# did checking using filter
# started doing check with case_when, but would take too long

# BOTTOM LINE (oct 09): ALL -99 CORRESPOND TO ZEROS, BECAUSE NO INDIVIDUAL 
# i) declared using <mode> (e.g. stm bus) on q21
# ii) had ALL columns referred to that mode (q22) equal to 0, -99 or NA

# df_count %>% 
#   mutate(
#     examples_stm_bus = case_when(
#       last_7_stm_bus == "Yes" &
#         (mode_stm_bus_dest_work %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_work)) |
#         (mode_stm_bus_dest_school %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_school)) |
#         (mode_stm_bus_dest_food %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_food)) |
#         (mode_stm_bus_dest_errands %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_errands)) |
#         (mode_stm_bus_dest_recreation %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_recreation)) |
#         (mode_stm_bus_dest_family_friends %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_family_friends)) |
#         (mode_stm_bus_dest_health %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_health)) |
#         (mode_stm_bus_dest_community_events %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_community_events)) |
#         (mode_stm_bus_dest_accompany %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_accompany)) |
#         (mode_stm_bus_dest_volunteer %nin% c(0L, -99L) | !is.na(mode_stm_bus_dest_volunteer)) ~ "example_a"
#       , last_7_stm_bus == "Yes" &
#         (mode_stm_bus_dest_work %in% c(0L, -99L) | is.na(mode_stm_bus_dest_work)) |
#         (mode_stm_bus_dest_school %in% c(0L, -99L) | is.na(mode_stm_bus_dest_school)) |
#         (mode_stm_bus_dest_food %in% c(0L, -99L) | is.na(mode_stm_bus_dest_food)) |
#         (mode_stm_bus_dest_errands %in% c(0L, -99L) | is.na(mode_stm_bus_dest_errands)) |
#         (mode_stm_bus_dest_recreation %in% c(0L, -99L) | is.na(mode_stm_bus_dest_recreation)) |
#         (mode_stm_bus_dest_family_friends %in% c(0L, -99L) | is.na(mode_stm_bus_dest_family_friends)) |
#         (mode_stm_bus_dest_health %in% c(0L, -99L) | is.na(mode_stm_bus_dest_health)) |
#         (mode_stm_bus_dest_community_events %in% c(0L, -99L) | is.na(mode_stm_bus_dest_community_events)) |
#         (mode_stm_bus_dest_accompany %in% c(0L, -99L) | is.na(mode_stm_bus_dest_accompany)) |
#         (mode_stm_bus_dest_volunteer %in% c(0L, -99L) | is.na(mode_stm_bus_dest_volunteer)) ~ "example_b"
#       , T ~ "error"
#     )
#   ) %>% unique(examples)
# 
# # or check using filter
# 
# df_count %>% 
#   filter(last_7_stm_bus=="Yes") %>% 
#   select(response_id,contains("mode_stm_bus")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_metro=="Yes") %>% 
#   select(response_id,contains("mode_metro")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_paratransit=="Yes") %>% 
#   select(response_id,contains("mode_paratransit")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_other_bus=="Yes") %>% 
#   select(response_id,contains("mode_other_bus")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_rail=="Yes") %>% 
#   select(response_id,contains("mode_rail")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_own_bike=="Yes") %>% 
#   select(response_id,contains("mode_own_bike")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_service_bike=="Yes") %>% 
#   select(response_id,contains("mode_service_bike")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_own_scooter=="Yes") %>% 
#   select(response_id,contains("mode_own_scooter")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_service_scooter=="Yes") %>% 
#   select(response_id,contains("mode_service_scooter")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_own_car=="Yes") %>% 
#   select(response_id,contains("mode_own_car")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_carpooling=="Yes") %>% 
#   select(response_id,contains("mode_carpooling")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_carsharing=="Yes") %>% 
#   select(response_id,contains("mode_carsharing")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_taxi=="Yes") %>% 
#   select(response_id,contains("mode_taxi")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 
# df_count %>% 
#   filter(last_7_motorcycle=="Yes") %>% 
#   select(response_id,contains("mode_motorcycle")) %>% 
#   filter(if_all(where(is.numeric), ~ . %in% c(0L, -99L) | is.na(.)) ) %>% 
#   nrow()
# 

```

### Correct missing code

<!-- ```{r correctmissingcoding} -->
<!-- data.table::setDT(df_count) -->
<!-- # OBS CHECK mode_ columns position before running code below -->
<!-- colunas <- colnames(df_count[,3:152]) -->
<!-- df_count[ -->
<!--   , (colunas) := replace(.SD, .SD == -99L, 0L) -->
<!--   , .SDcols = colunas -->
<!--   ] -->

<!-- # df_count <- df_count %>%  -->
<!-- #   mutate( -->
<!-- #     across(mode_stm_bus_dest_work:mode_motorcycle_dest_volunteer, ~dplyr::na_if(., -99L)) -->
<!-- #   ) -->
<!-- ``` -->




```{r counttrips}
f_count_trips <- function(){
  
  # count trips by mode and destination
df_trips <- df_count %>% 
  select(response_id,wave,mode_stm_bus_dest_work:mode_rem_dest_volunteer) %>% 
  pivot_longer(cols = mode_stm_bus_dest_work:mode_rem_dest_volunteer
               ,names_to = "type", values_to = "count") %>% 
  separate_wider_regex(
  type
  , c("mode_", mode = ".*", "_dest_", dest =".*")
  ) %>% 
  mutate(
    # replace NA
    count = tidyr::replace_na(count, 0L)
    # identify transit trips
    , type = case_when(
      mode %in% c("metro", "other_bus", "paratransit", "rail", "stm_bus", "rem") ~ "transit"
      , mode %in% c("walk", "own_bike", "service_bike") ~ "active"
      , mode %in% c("own_car", "carsharing") ~ "car"
      , .default = "other"
    )
    )

data.table::setDT(df_trips)


# count total trips
df_trips_total <- df_trips %>% 
  group_by(response_id) %>% 
  summarise(count_trips_total = sum(count, na.rm = T)) %>% 
  mutate(avg_trips_weekly_total = count_trips_total / 7)

# count total trips wave
df_trips_wave <- df_trips %>% 
  group_by(response_id, wave) %>% 
  summarise(count_trips_wave = sum(count, na.rm = T)) %>% 
  mutate(avg_trips_weekly_wave = count_trips_wave / 7)


# count modes used
df_modes <- df_trips[
  !is.na(count) & count != 0L
  , .(count_modes = data.table::uniqueN(c(mode)))
  , by = .(response_id, wave)
]
# the code below does not include lines for observations with NA
# the code below left joins the data so that all the observations have info on number modes
df_count_modes <- df_count %>% select(response_id, wave) %>% 
  dplyr::left_join(df_modes, by = c("response_id", "wave"))
rm(df_modes)

df_count_modes <- df_count_modes %>% 
  mutate(count_modes = tidyr::replace_na(count_modes, 0L))

# count destination
df_dest <- df_trips[
  !is.na(count) & count != 0L
  , .(count_dest = data.table::uniqueN(c(dest)))
  , by = .(response_id, wave)
]

df_count_dest <- df_count %>% select(response_id, wave) %>% 
  dplyr::left_join(df_dest, by = c("response_id", "wave"))
rm(df_dest)

df_count_dest <- df_count_dest %>% 
  mutate(count_dest = tidyr::replace_na(count_dest, 0L))

# count trips by mode
df_trips_mode <- df_trips %>% 
  group_by(response_id, wave, mode) %>% 
  summarise(count_trips_mode = sum(count, na.rm = T)) 

df_trips_mode_wide <- df_trips_mode %>% 
  pivot_wider(
    id_cols = c(response_id,wave)
    , names_from = mode
    , values_from = count_trips_mode
    , names_prefix = "count_trips_"
    )

# count trips by type
df_trips_type <- df_trips %>% 
  group_by(response_id, wave, type) %>% 
  summarise(count_trips_type = sum(count, na.rm = T))

df_trips_type_wide <- df_trips_type %>% 
  pivot_wider(
    id_cols = c(response_id, wave)
    , names_from = type
    , values_from = count_trips_type
    , names_prefix = "count_trips_type_"
  )

# count trips by dest
df_trips_dest <- df_trips %>% 
  group_by(response_id, wave, dest) %>% 
  summarise(count_trips_dest = sum(count, na.rm = T))

df_trips_dest_wide <- df_trips_dest %>% 
  pivot_wider(
    id_cols = c(response_id, wave)
    , names_from = dest
    , values_from = count_trips_dest
    , names_prefix = "count_trips_"
    )
  

# main dest, mode, type
   # LATER: HOW TO DEALT WITH TIES?
df_main_ind_trip <- df_trips[, .SD[which.max(count)], by = .(response_id,wave)]

data.table::setDT(df_trips_dest)
df_main_trip_dest <- df_trips_dest[, .SD[which.max(count_trips_dest)], by = .(response_id, wave)] %>% 
  mutate(
    main_dest = case_when(
      count_trips_dest == 0L ~ NA_character_
      , .default = dest
    )
      )

data.table::setDT(df_trips_mode)
df_main_trip_mode <- df_trips_mode[, .SD[which.max(count_trips_mode)], by = .(response_id,wave)] %>% 
  mutate(
    main_mode = case_when(
      count_trips_mode == 0L ~ NA_character_
      , .default = mode
    )
  )

data.table::setDT(df_trips_type)
df_main_trip_type <- df_trips_type[, .SD[which.max(count_trips_type)], by = .(response_id,wave)] %>% 
  mutate(
    main_type = case_when(
      count_trips_type == 0L ~ NA_character_
      , .default = type
    )
  )

# 
# df_main <- df_main %>% 
#   # filter(!count == 0L) %>% 
#   mutate(
#     main_mode = case_when(
#       count != 0L ~ mode, 
#       count == 0L ~ NA_character_
#         )
#     , main_dest = case_when(
#       count != 0L ~ dest, 
#       count == 0L ~ NA_character_
#         )
#     , main_type = case_when(
#       count != 0L ~ type, 
#       count == 0L ~ NA_character_
#         )
#   )

# df_trips %>% group_by(response_id, type) %>%
#   mutate(the_rank  = rank(-count, ties.method = "max")) %>%
#   filter(the_rank == 1)

# create list with dfs
  lista <- list(
    "df_trips" = df_trips
    , 'df_trips_total' = df_trips_total
    , 'df_trips_wave' = df_trips_wave
    , 'df_count_modes' = df_count_modes
    , 'df_count_dest' = df_count_dest
    , 'df_trips_mode' = df_trips_mode
    , 'df_trips_mode_wide' = df_trips_mode_wide
    , "df_trips_type" = df_trips_type
    , "df_trips_type_wide" = df_trips_type_wide
    , 'df_trips_dest' = df_trips_dest
    , 'df_trips_dest_wide' = df_trips_dest_wide
    , "df_main_ind_trip" = df_main_ind_trip
    , "df_main_trip_dest" = df_main_trip_dest
    , "df_main_trip_mode" = df_main_trip_mode
    , "df_main_trip_type" = df_main_trip_type
  )
  
  return(lista)
}

l_trips_wave <- f_count_trips()
# str_extract("(?<=mode_)(.*)(?=_dest_)")
# str_extract("(?<=dest_)(.*)")
```

```{r joincounttrips}
df_both <- df_both %>% 
  dplyr::left_join(l_trips_wave$df_trips_total, by = c("response_id")) %>% 
  dplyr::left_join(l_trips_wave$df_trips_wave, by = c("response_id","wave")) %>% 
  dplyr::left_join(l_trips_wave$df_count_modes, by = c("response_id","wave")) %>% 
  dplyr::left_join(l_trips_wave$df_count_dest, by = c("response_id","wave")) %>%
  dplyr::left_join(l_trips_wave$df_trips_dest_wide, by = c("response_id","wave")) %>%
  dplyr::left_join(l_trips_wave$df_trips_type_wide, by = c("response_id","wave")) %>%  
  dplyr::left_join(l_trips_wave$df_main_trip_dest %>% select(response_id,wave,main_dest)
                   , by = c("response_id","wave")) %>% 
  dplyr::left_join(l_trips_wave$df_main_trip_mode %>% select(response_id,wave,main_mode)
                   , by = c("response_id","wave")) %>% 
  dplyr::left_join(l_trips_wave$df_main_trip_type %>% select(response_id,wave,main_type)
                   , by = c("response_id","wave"))
```

### Recode factor levels

THIS HAS NOT BEEN UPDATED. UPDATE ACCORDING TO THE NEEDS OF NEW VARIABLES

```{r factorlevels}
lvls_yes_no <- c("No", "Yes")
lvls_vis_minority <- c("Non-visible minority"
                       ,"Native NA origins"
                       ,"Visible minority")
lvls_employment <- c(
  "Employed full-time"
  , "Retired"
  , "Employed part-time"
  , "Other"
  , "Unemployed"
)

lvls_when <- c(
  "Today or yesterday"
  ,"In the last week"
  ,"In the last two weeks"
  ,"In the last month"
  ,"Within the last three months"
  ,"Within the last six months"
  ,"Within the last year"
  , "More than a year ago"
  )

lvls_suppressed_alt <- c(
  "Active", "Car", "Suppressed trip", "Other"
)

lvls_satisfied <- c("Satisfied", "Dissatisfied", "Neither")

lvls_age_groups_all <- c(
  "age_50_54"
  , "age_55_59"
  , "age_60_64"
  , "age_65_69"
  , "age_70_74"
  , "age_75_79"  
  , "age_80_84" 
  , "age_85_89"
  , "age_90_over" 
)

lvls_income <- c(
  "Less than $15,000"
  , "$15,000 to $29,999"
  , "$30,000 to $59,999"
  , "$60,000 to $89,999"
  , "$90,000 to $119,999"
  , "$120,000 to $149,999"
  , "$150,000 to $179,999"
  , "$180,000 to $209,999"
  , "$210,000 or more"
)

lvls_response <- c("Did not start wave 2", "Start wave 2")
```


```{r recodefactorrelevel}
df_both <- df_both %>% 
  mutate(
    across(
      c(in_lim, educ_has_postsec, lone_household, employed, unemployed
        , immigrant
        , any_functional_limitation, any_mobility_limitation
        , firstnations_metis_inuit 
        , has_vehicle_household
        , transit_once_week_plus, last_7_mode_transit
        , last_7_mode_car, last_7_mode_active, awereness_free_pass
        , has_free_pass_wave1, has_free_pass_wave2
        , has_free_pass_improved_wave2
        , rides_transit_as_would_like, has_cost_prevented_transit
        , confident_transit, satisfied_transit
        , difficulty_transport_expenses
        )
      , ~forcats::fct_relevel(.x, lvls_yes_no)
      )
    , across(starts_with("^transit_barrier"), ~forcats::fct_relevel(.x, lvls_yes_no))
    , across(starts_with("suppresed_dest"), ~forcats::fct_relevel(.x, lvls_yes_no))
    , visible_minority = fct_relevel(visible_minority, lvls_vis_minority)
    , employment = fct_relevel(employment, lvls_employment)
    , when_cost_transport_barrier = fct_relevel(when_cost_transport_barrier, lvls_when)
    , across(starts_with("^satisfaction"), ~fct_relevel(.x, lvls_satisfied))
    , age_groups_5_all = fct_relevel(age_groups_5_all, lvls_age_groups_all)
    , income_groups = fct_relevel(income_groups, lvls_income)
    , response_rate = fct_relevel(response_rate, lvls_response)
    )

```


## CT

* Visible minority
* LIM

*OBS.*: each demographic has its own total (for estimating the percentages).
*OBS.2*: denominator is the sum for the whole CD.


<!-- ```{r} -->
<!-- # get total population sum -->
<!-- # cma_pop = sum(montreal_cma_ct$population, na.rm = T) -->


<!-- # sums -->
<!-- montreal_cd_ct <- montreal_cd_ct %>%  -->
<!--   dplyr::mutate( -->
<!--     # age -->
<!--     age_50_64_tot = age_50_54_tot + age_55_59_tot + age_60_64_tot -->
<!--     , age_50_64_mal = age_50_54_mal + age_55_59_mal + age_60_64_mal -->
<!--     , age_50_64_fem = age_50_54_fem + age_55_59_fem + age_60_64_fem -->
<!--   ) -->

<!-- # total pop sum for each category -->
<!-- cd_pop_tot_age = sum(montreal_cd_ct$total_tot, na.rm = T) -->

<!-- cd_pop_tot_vis_minority = sum(montreal_cd_ct$tot_vis_minority_tot_parent -->
<!--                               , na.rm = T) -->

<!-- cd_pop_tot_lim = sum(montreal_cd_ct$count_lim_tot_parent, na.rm = T) -->

<!-- # proportion -->
<!-- montreal_cd_ct <- montreal_cd_ct %>%  -->
<!--   mutate( -->
<!--     prop_age_50_64_tot = age_50_64_tot / cd_pop_tot_age -->
<!--     , prop_age_65_over_tot = age_65_over_tot / cd_pop_tot_age -->
<!--     , prop_vis_minority_tot = tot_vis_minority_tot / cd_pop_tot_vis_minority -->
<!--     , prop_in_lim_tot = count_lim_tot_in_lim / cd_pop_tot_lim -->
<!--   ) -->
<!-- ``` -->



# Save data

Save data as R.Data (for using factors columns)

```{r saveasgpkg}
# sf::st_write(montreal_cd_ct, "data/report/montreal_cd_ct_count.gpkg", append = F)
# sf::st_write(montreal_fsa, "data/report/montreal_fsa_count.gpkg", append = F)
# sf::st_write(survey_filter_cd, "data/report/survey_filter_inside_cd.gpkg",
#              append = F)
```


```{r saverdata}
save(l_trips_wave, file = "data/list_count_trips_wave.RData")
save(df_both, file = "data/df_both_waves.RData")

```
