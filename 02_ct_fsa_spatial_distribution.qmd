---
title: "01_geocode_data"
format: html
editor: source
---

# Setup

```{r}
#| echo: false
#| warning: false
library(tidyverse)
library(sf)
library(data.table)
library(janitor)
library(fs)
library(cancensus)
library(tmap)
library(DataExplorer)
library(patchwork)
library(mapview)
```

```{r}
# data.table optimization
# details > https://jangorecki.gitlab.io/data.cube/library/data.table/html/datatable-optimize.html
options(datatable.optimize=Inf)
# notations
`%nin%` = Negate(`%in%`)

`%nlike%` = Negate(`%like%`)
```

# Read survey data

```{r}
survey_sf <- sf::st_read("data/df_survey_montreal_filter_sf_new.gpkg")
survey_sf <- sf::st_transform(survey_sf, crs = 26918)
```

# CT Census Tract data

## Set up cancencus


```{r}
# Set api key
census_key <- data.table::fread("data/census_api_key.csv", header = F)
census_key <- census_key %>% as_vector()
options(cancensus.api_key = census_key)

# Set up cache
dir_create("./cache")
options(cancensus.cache_path = "./cache")
```

## Download census data

```{r}
montreal_cma_ct <- get_census(
  # 2021 census
  dataset = 'CA21', 
  
  # toronto is CMA code 535; oshawa 532
  regions = list(
    CMA = c("24462") # metro -> necessary for plotting all the data
    # CD = c("2466") # regional district
    # CSD = c("2466023") # city
    ),
  
  # our variables of interest
  vectors = c(
    "total_tot" = "v_CA21_8"
    , "male_tot" = "v_CA21_9"
    , "female_tot" = "v_CA21_10"
    , "age_0_14_tot" = "v_CA21_11"
    , "age_0_14_mal" = "v_CA21_12"
    , "age_0_14_fem" = "v_CA21_13"
    , "age_15_19_tot" = "v_CA21_71"
    , "age_15_19_mal" = "v_CA21_72"
    , "age_15_19_fem" = "v_CA21_73"
    , "age_20_24_tot" = "v_CA21_89"
    , "age_20_24_mal" = "v_CA21_90"
    , "age_20_24_fem" = "v_CA21_91"
    , "age_25_29_tot" = "v_CA21_107"
    , "age_25_29_mal" = "v_CA21_108"
    , "age_25_29_fem" = "v_CA21_109"
    , "age_30_34_tot" = "v_CA21_125"
    , "age_30_34_mal" = "v_CA21_126"
    , "age_30_34_fem" = "v_CA21_127"
    , "age_35_39_tot" = "v_CA21_143"
    , "age_35_39_mal" = "v_CA21_144"
    , "age_35_39_fem" = "v_CA21_145"
    , "age_40_44_tot" = "v_CA21_161"
    , "age_40_44_mal" = "v_CA21_162"
    , "age_40_44_fem" = "v_CA21_163"
    , "age_45_49_tot" = "v_CA21_179"
    , "age_45_49_mal" = "v_CA21_180"
    , "age_45_49_fem" = "v_CA21_181"
    , "age_50_54_tot" = "v_CA21_197"
    , "age_50_54_mal" = "v_CA21_198"
    , "age_50_54_fem" = "v_CA21_199"
    , "age_55_59_tot" = "v_CA21_215"
    , "age_55_59_mal" = "v_CA21_216"
    , "age_55_59_fem" = "v_CA21_217"
    , "age_60_64_tot" = "v_CA21_233"
    , "age_60_64_mal" = "v_CA21_234"
    , "age_60_64_fem" = "v_CA21_235"
    , "age_65_over_tot" = "v_CA21_251"
    , "age_65_over_mal" = "v_CA21_252"
    , "age_65_over_fem" = "v_CA21_253"
    
    # # lim percent
    # , "percent_lim_tot" = "v_CA21_1040" # total pop - total years - % of pop below lim
    # , "percent_lim_mal" = "v_CA21_1041" # male pop - total years - % of pop below lim
    # , "percent_lim_fem" = "v_CA21_1042" # female pop - total years - % of pop below lim
    # , "percent_lim_tot_65_over" = "v_CA21_1052" # total pop - 65 and over - % of pop below lim
    # , "percent_lim_mal_65_over" = "v_CA21_1053" # male pop - 65 and over - % of pop below lim
    # , "percent_lim_fem_65_over" = "v_CA21_1054" # female pop - 65 and over - % of pop below lim
    
    # lim count
    , "count_lim_tot_parent" = "v_CA21_1010" # total pop - total years - % of pop below lim
    , "count_lim_mal_parent" = "v_CA21_1011" # male pop - total years - % of pop below lim
    , "count_lim_fem_parent" = "v_CA21_1012" # female pop - total years - % of pop below lim
    , "count_lim_tot_65_over_parent" = "v_CA21_1022" # total pop - 65 and over - % of pop below lim
    , "count_lim_mal_65_over_parent" = "v_CA21_1023" # male pop - 65 and over - % of pop below lim
    , "count_lim_fem_65_over_parent" = "v_CA21_1024" # female pop - 65 and over - % of pop below lim
    
    , "count_lim_tot_in_lim" = "v_CA21_1025" # total pop - total years - % of pop below lim
    , "count_lim_mal_in_lim" = "v_CA21_1026" # male pop - total years - % of pop below lim
    , "count_lim_fem_in_lim" = "v_CA21_1027" # female pop - total years - % of pop below lim
    , "count_lim_tot_65_over_in_lim" = "v_CA21_1037" # total pop - 65 and over - % of pop below lim
    , "count_lim_mal_65_over_in_lim" = "v_CA21_1038" # male pop - 65 and over - % of pop below lim
    , "count_lim_fem_65_over_in_lim" = "v_CA21_1039" # female pop - 65 and over - % of pop below lim

    
    # vis minority
    , "tot_vis_minority_tot_parent" = "v_CA21_4872"
    , "tot_vis_minority_mal_parent" = "v_CA21_4873"
    , "tot_vis_minority_fem_parent" = "v_CA21_4874"
    
    , "tot_vis_minority_tot" = "v_CA21_4875"
    , "tot_vis_minority_mal" = "v_CA21_4876"
    , "tot_vis_minority_fem" = "v_CA21_4877"
    
  ),
  
  # census DA geography
  level = 'CT',
  
  # put the downloaded data in our cache directory
  use_cache = TRUE,
  
  # get the associated geography in {sf} format
  geo_format = 'sf'
) %>% janitor::clean_names()


montreal_cd_ct <- get_census(
  # 2021 census
  dataset = 'CA21', 
  
  # toronto is CMA code 535; oshawa 532
  regions = list(
    # CMA = c("24462") # metro -> necessary for plotting all the data
    CD = c("2466") # regional district
    # CSD = c("2466023") # city
    ),
  
  # our variables of interest
  vectors = c(
    "total_tot" = "v_CA21_8"
    , "male_tot" = "v_CA21_9"
    , "female_tot" = "v_CA21_10"
    , "age_0_14_tot" = "v_CA21_11"
    , "age_0_14_mal" = "v_CA21_12"
    , "age_0_14_fem" = "v_CA21_13"
    , "age_15_19_tot" = "v_CA21_71"
    , "age_15_19_mal" = "v_CA21_72"
    , "age_15_19_fem" = "v_CA21_73"
    , "age_20_24_tot" = "v_CA21_89"
    , "age_20_24_mal" = "v_CA21_90"
    , "age_20_24_fem" = "v_CA21_91"
    , "age_25_29_tot" = "v_CA21_107"
    , "age_25_29_mal" = "v_CA21_108"
    , "age_25_29_fem" = "v_CA21_109"
    , "age_30_34_tot" = "v_CA21_125"
    , "age_30_34_mal" = "v_CA21_126"
    , "age_30_34_fem" = "v_CA21_127"
    , "age_35_39_tot" = "v_CA21_143"
    , "age_35_39_mal" = "v_CA21_144"
    , "age_35_39_fem" = "v_CA21_145"
    , "age_40_44_tot" = "v_CA21_161"
    , "age_40_44_mal" = "v_CA21_162"
    , "age_40_44_fem" = "v_CA21_163"
    , "age_45_49_tot" = "v_CA21_179"
    , "age_45_49_mal" = "v_CA21_180"
    , "age_45_49_fem" = "v_CA21_181"
    , "age_50_54_tot" = "v_CA21_197"
    , "age_50_54_mal" = "v_CA21_198"
    , "age_50_54_fem" = "v_CA21_199"
    , "age_55_59_tot" = "v_CA21_215"
    , "age_55_59_mal" = "v_CA21_216"
    , "age_55_59_fem" = "v_CA21_217"
    , "age_60_64_tot" = "v_CA21_233"
    , "age_60_64_mal" = "v_CA21_234"
    , "age_60_64_fem" = "v_CA21_235"
    , "age_65_over_tot" = "v_CA21_251"
    , "age_65_over_mal" = "v_CA21_252"
    , "age_65_over_fem" = "v_CA21_253"
    
    # # lim percent
    # , "percent_lim_tot" = "v_CA21_1040" # total pop - total years - % of pop below lim
    # , "percent_lim_mal" = "v_CA21_1041" # male pop - total years - % of pop below lim
    # , "percent_lim_fem" = "v_CA21_1042" # female pop - total years - % of pop below lim
    # , "percent_lim_tot_65_over" = "v_CA21_1052" # total pop - 65 and over - % of pop below lim
    # , "percent_lim_mal_65_over" = "v_CA21_1053" # male pop - 65 and over - % of pop below lim
    # , "percent_lim_fem_65_over" = "v_CA21_1054" # female pop - 65 and over - % of pop below lim
    
    # lim count
    , "count_lim_tot_parent" = "v_CA21_1010" # total pop - total years - % of pop below lim
    , "count_lim_mal_parent" = "v_CA21_1011" # male pop - total years - % of pop below lim
    , "count_lim_fem_parent" = "v_CA21_1012" # female pop - total years - % of pop below lim
    , "count_lim_tot_65_over_parent" = "v_CA21_1022" # total pop - 65 and over - % of pop below lim
    , "count_lim_mal_65_over_parent" = "v_CA21_1023" # male pop - 65 and over - % of pop below lim
    , "count_lim_fem_65_over_parent" = "v_CA21_1024" # female pop - 65 and over - % of pop below lim
    
    , "count_lim_tot_in_lim" = "v_CA21_1025" # total pop - total years - % of pop below lim
    , "count_lim_mal_in_lim" = "v_CA21_1026" # male pop - total years - % of pop below lim
    , "count_lim_fem_in_lim" = "v_CA21_1027" # female pop - total years - % of pop below lim
    , "count_lim_tot_65_over_in_lim" = "v_CA21_1037" # total pop - 65 and over - % of pop below lim
    , "count_lim_mal_65_over_in_lim" = "v_CA21_1038" # male pop - 65 and over - % of pop below lim
    , "count_lim_fem_65_over_in_lim" = "v_CA21_1039" # female pop - 65 and over - % of pop below lim

    
    # vis minority
    , "tot_vis_minority_tot_parent" = "v_CA21_4872"
    , "tot_vis_minority_mal_parent" = "v_CA21_4873"
    , "tot_vis_minority_fem_parent" = "v_CA21_4874"
    
    , "tot_vis_minority_tot" = "v_CA21_4875"
    , "tot_vis_minority_mal" = "v_CA21_4876"
    , "tot_vis_minority_fem" = "v_CA21_4877"
    
  ),
  
  # census DA geography
  level = 'CT',
  
  # put the downloaded data in our cache directory
  use_cache = TRUE,
  
  # get the associated geography in {sf} format
  geo_format = 'sf'
) %>% janitor::clean_names()
```

Set crs for census data

```{r}
# utm zone for montreal: utm18 -> epsg 26918
# https://mangomap.com/robertyoung/maps/69585/what-utm-zone-am-i-in-#
montreal_cma_ct <- sf::st_transform(montreal_cma_ct, crs = 26918)
montreal_cd_ct <- sf::st_transform(montreal_cd_ct, crs = 26918)
# sf::st_crs(montreal_cma_ct) <- 4326
# sf::st_crs(montreal_cd_ct) <- 4326
```

### Remove NAs from age population columns 
```{r}
montreal_cd_ct <- montreal_cd_ct %>% 
  dplyr::mutate(
    dplyr::across(total_tot:tot_vis_minority_fem, ~tidyr::replace_na(.x, 0))
  )
```



## Buffer: Plot CT and survey data

Create buffer for finding points inside polygons:

```{r}
cd_buff <- sf::st_buffer(montreal_cd_ct, 250)
cma_buff <- sf::st_buffer(montreal_cma_ct, 250)
```

Find survey respondents that live inside Montreal (CD or CMA?).
Spatial filtering.

```{r}
## spatial filtering using `[`
survey_filter_cd <- survey_sf[cd_buff, ]

## spatial filtering selecting geometries: st_filter works for new survey sf
# f_st_filter <- function(points_df, buff_df){
# 
#   points_df_geom <- points_df %>% select(v1, geom)
#   buff_df_geom <- buff_df %>% select(geo_uid, geometry)
# 
#   df_st_filter <- sf::st_filter(points_df_geom, buff_df_geom)
# 
#   points_df <- points_df %>% sf::st_drop_geometry()
# 
#   df_join <- left_join(points_df, df_st_filter)
#   df_join <- df_join %>% sf::st_as_sf()
# }
# survey_filter_cd <- f_st_filter(survey_sf, cd_buff)
## using st_filter
# survey_filter_cd <- sf::st_filter(survey_sf, cd_buff, .predicate = st_intersects)

## OBS: st_filter considers two observations (v1 %in% c(35,46)) inside the polygons (which the other methods do not consider). These observations are not within/don't intersect with the polygons. So, use `[` or lentghs(st_intersects) method

## using st_intersects
# survey_sf <- survey_sf %>% 
#   dplyr::mutate(
#     inside_cma = lengths(sf::st_intersects(survey_sf, cma_buff))
#     , inside_cd = lengths(sf::st_intersects(survey_sf, cd_buff))
#   )
# filter points inside polygon
# survey_inside_cd <- survey_sf %>%
#   filter(inside_cd > 0)
# 
# survey_inside_cma <- survey_sf %>% 
#   filter(inside_cma > 0)
```

Plot boundaries and points to check which points fall outside the 250m buffer.

```{r}

# mapview(list(survey_filter_cd, montreal_cd_ct))

tm_shape(montreal_cma_ct) +
  tm_polygons(col = "beige") +
  tm_shape(montreal_cd_ct) +
  tm_polygons() +
  tm_shape(survey_filter_cd) +
  tm_dots()
```

## Create categories survey

*Reminder*: our objective is to compare the spatial distribution of the sample agains the spatial distribution of the *population over 50* at the CT level.

To do so, we check if the sample *underrepresents* (i.e., has a *smaller* percentage of people over 50 than the percentage of individuals from that age within the CT according to the census) or **overrepresents** (i.e., has a **higher** percentage than the census).

We need to create a category for people over 50.
```{r}
# get total population sum
# cma_pop = sum(montreal_cma_ct$population, na.rm = T)
cd_pop = sum(montreal_cd_ct$population, na.rm = T)

# montreal_cma_ct <- montreal_cma_ct %>% 
#   dplyr::mutate(
#     age_50_over = age_50_54_tot + age_55_59_tot + age_60_64_tot + age_65_over_tot
#     , prop_age_50_over = age_50_over / cma_pop
#   )

montreal_cd_ct <- montreal_cd_ct %>% 
  dplyr::mutate(
    age_50_over = age_50_54_tot + age_55_59_tot + age_60_64_tot + age_65_over_tot
    , prop_age_50_over = age_50_over / cd_pop
  )
```

```{r}
# consider survey size only those inside cd boundaries
survey_size_cd = nrow(survey_filter_cd)

# % of individuals that live within each CT (number of individuals in CT / total observations in the sample)

montreal_cd_ct <- montreal_cd_ct %>% 
  mutate(
    count_survey = lengths(sf::st_intersects(montreal_cd_ct, survey_filter_cd)) 
    , prop_survey = count_survey / survey_size_cd
  )

# count number of points in polygons
# ptsinpoly <- st_intersects(montreal_cd_ct, survey_sf)
# montreal_cd_ct$count <- lengths(ptsinpoly)


```

## Plot data
```{r}
# plot number of survey respondents in each CT
tm_shape(montreal_cd_ct) + 
  tm_fill(
    col = "count_survey"
    # , style = "jenks"
    , pal=c("grey",RColorBrewer::brewer.pal(4, "YlOrBr"))
    )
```


```{r}
# get interevals
# tm_shape(montreal_cd_ct) +
#   tm_fill(
#     col = "prop_survey"
#     , style = "jenks"
#     # , pal=c("grey",RColorBrewer::brewer.pal(4, "YlOrBr"))
#     )
#
# montreal_cd_ct <- montreal_cd_ct %>%
#   mutate(
#     intervals = cut(
#       prop_survey
#       , breaks = c(0, 0.006, 0.018, 0.036, 0.059, 0.101))
#     )

# tm_shape(montreal_cd_ct) +
#   tm_fill(col = "intervals", palette = "YlGnBu")
```


```{r}
#| warning: false
# get census natural breaks
# plot spatial distributions
montreal_cd_ct %>% 
  mutate(prop_age_50_over = na_if(prop_age_50_over, 0L)) %>% 
  tm_shape() + 
  tm_polygons(
    col = "prop_age_50_over"
    , style = "jenks"
    , palette = "YlOrBr"
    , border.alpha = 0.25
    )

# cut intervals
montreal_cd_ct <- montreal_cd_ct %>%
   mutate(
     intervals_age_50_over = cut(
       prop_age_50_over
       , breaks = c(0, 0.0001, 0.0004, 0.0007, 0.0011, 0.0016, 0.0023, Inf)
       )
     , intervals_survey = cut(
       prop_survey
       , breaks = c(0, 0.0001, 0.0004, 0.0007, 0.0011, 0.0016, 0.0023, Inf)
       )
     )

tmct_census <- tm_shape(montreal_cd_ct) +
   tm_polygons(
     col = "intervals_age_50_over"
     , palette = "YlOrBr"
     , border.alpha = 0.25
     , title = "prop_age_50_over"
     )

tmct_survey <- tm_shape(montreal_cd_ct) +
   tm_polygons(
     col = "intervals_survey"
     , palette = "YlOrBr"
     , border.alpha = 0.25
     , title = "prop_survey"
     )

# tmct_survey <- montreal_cd_ct %>% 
#   mutate(prop_survey = na_if(prop_survey, 0L)) %>% 
#   tm_shape() + 
#   tm_polygons(
#     col = "prop_survey"
#     , style = "jenks"
#     , palette = "YlOrBr"
#     , border.alpha = 0.25
#     )
# 
# tmct_survey <- tm_shape(montreal_cd_ct) + 
#   tm_fill(col = "intervals", palette = "YlOrBr", title = "prop_survey")

# get island's centroid
# montreal_union <- montreal_cd_ct %>% 
#   mutate(all = "all") %>% 
#   group_by(all) %>% 
#   summarise() %>% 
#   ungroup()
# 
# montreal_centroid <- sf::st_centroid(montreal_union)
# 
# tm2 <- tm2 + tm_shape(montreal_centroid) + tm_dots(size = 0.125)

tmap_arrange(tmct_census, tmct_survey)
```



```{r}
# compare distributions
DataExplorer::plot_histogram(
  montreal_cd_ct %>% select(prop_age_50_over, prop_survey)
  , ggtheme = hrbrthemes::theme_ipsum()
  )
```


```{r}
# FIGURE OUT HOW TO COMPARE THESE PROPORTIONS
# montreal_cd_ct <- montreal_cd_ct %>%
#   mutate(
#     representation = case_when(
#       prop_survey <
#     )
#   )
```

# FSA data

## Read demographic data
```{r}
# demographic information for fsa downloaded at chass website
# http://dc.chass.utoronto.ca.myaccess.library.utoronto.ca/cgi-bin/census/2021/displayCensus.cgi?year=2021&geo=fsa#

# list of montreal's fsa at:
# https://ofomaps.com/downloads/montreal-fsa-map/

# fsa dictionary
fsa_dic <- readr::read_delim("data/chass fsa dictionary 2021.txt")
# fsa data
montreal_fsa <- data.table::fread("data/chass fsa 2021 montreal h1a h9x.csv")
montreal_fsa <- montreal_fsa %>% janitor::clean_names()
# rename columns
data.table::setnames(
  montreal_fsa
  , old = colnames(montreal_fsa)
  , new = c(
    "geouid"
    , "fsa_name"
    , "population_2021"
    , "total_age"
    , "age_0_14_tot"
    , "age_15_19_tot"
    , "age_20_24_tot"
    , "age_25_29_tot"
    , "age_30_34_tot"
    , "age_35_39_tot"
    , "age_40_44_tot"
    , "age_45_49_tot"
    , "age_50_54_tot"
    , "age_55_59_tot"
    , "age_60_64_tot"
    , "age_65_over_tot"
  )
)
```

## Read spatial data

```{r}
# fsa shapefile downloaded at statscan website
# https://www12.statcan.gc.ca/census-recensement/alternative_alternatif.cfm?l=eng&dispext=zip&teng=lfsa000b21a_e.zip&k=%20%20%20158240&loc=//www12.statcan.gc.ca/census-recensement/2021/geo/sip-pis/boundary-limites/files-fichiers/lfsa000b21a_e.zip
fsa_shp <- sf::st_read("data/statscan_fsa census_2021/lfsa000b21a_e.shp")
fsa_shp <- janitor::clean_names(fsa_shp)
```


## Filter FSA

```{r}
# select fsa from montreal chass data
fsa_shp <- fsa_shp %>% 
  filter(cfsauid %in% unique(montreal_fsa$geouid))

# Change crs montreal's UTM Zone 
# utm zone for montreal: utm18 -> epsg 26918
fsa_shp <- sf::st_transform(fsa_shp, 26918)
```



## Plot CT and FSA maps
FSA map appears to contain a territorty larger than the boundaries of the island of Montreal.
The plot below shows which postal codes can be excluded from the FSA .shp so that CT and FSA refer to the same areas.

```{r}
tmct <- tm_shape(montreal_cd_ct) + tm_polygons()
tmfsa <- tm_shape(fsa_shp) + tm_polygons() + tm_text("cfsauid", size = 0.75)
tmap_arrange(tmct, tmfsa)
```

We can then remove FSAs that contain the initials *"H7"*.

```{r}
# filter out FSAs whose postal codes start with H7
fsa_shp <- fsa_shp %>% 
  filter(!str_detect(fsa_shp$cfsauid, "^H7"))

# plot to check .shp
tmfsa_filter <- tm_shape(fsa_shp) + 
  tm_polygons() + 
  tm_text("cfsauid", size = 0.75)

tmap_arrange(tmct, tmfsa_filter)
```


## Save montreal FSA .shp
```{r}
sf::st_write(fsa_shp, "data/statscan_montreal_fsa.gpkg", append = F)
```

## Buffer: plot FSA and survey data

Create buffer for finding points inside polygons:

```{r}
cd_buff_fsa <- sf::st_buffer(fsa_shp, 250)
```

Find survey respondents that live inside Montreal (CD).

```{r}
survey_filter_cd_fsa <- survey_sf[cd_buff_fsa, ]
```

Plot boundaries and points to check which points fall outside the 250m buffer.

```{r}
tm_shape(montreal_cma_ct) +
  tm_polygons(col = "beige") +
  tm_shape(fsa_shp) +
  tm_polygons() +
  tm_shape(survey_filter_cd_fsa) +
  tm_dots()
```

## Join CRASS data with FSA .shp

```{r}
# filter montreal fsa according to map
montreal_fsa <- montreal_fsa %>% 
  filter(geouid %in% unique(fsa_shp$cfsauid))

# left join sf and data frame
# https://gis.stackexchange.com/questions/225729/left-join-breaking-sf

# https://r-spatial.github.io/sf/reference/tidyverse.html
# unable how to use left_join.sf

# left join categories chass data with shp
montreal_fsa <- montreal_fsa %>% 
  left_join(
    fsa_shp %>% select(cfsauid, geometry)
    , by = c("geouid" = "cfsauid")
  )

montreal_fsa <- montreal_fsa %>% sf::st_as_sf()

```

## Replace NA

```{r}
montreal_fsa <- montreal_fsa %>% 
  dplyr::mutate(
    dplyr::across(age_0_14_tot:age_65_over_tot, ~tidyr::replace_na(.x, 0))
  )
```


## Create categories for survey and census data at FSA level

```{r}
# get total population sum
cd_pop_fsa = sum(montreal_fsa$total_age, na.rm = T)

montreal_fsa <- montreal_fsa %>% 
  dplyr::mutate(
    age_50_over = age_50_54_tot + age_55_59_tot + age_60_64_tot + age_65_over_tot
    , prop_age_50_over = age_50_over / cd_pop_fsa
  )
```


```{r}
montreal_fsa <- montreal_fsa %>% 
  mutate(
    count_survey = lengths(
      sf::st_intersects(montreal_fsa, survey_filter_cd_fsa)
      ) 
    , prop_survey = count_survey / survey_size_cd
  )
```

## Plot data
```{r}
# plot number of survey respondents in each FSA
montreal_fsa %>% 
  mutate(count_survey = na_if(count_survey, 0L)) %>% 
  tm_shape() +
  tm_fill(
    col = "count_survey"
    , style = "jenks"
    )
```


```{r}
#| warning: false
# get census natural breaks
# plot spatial distributions
montreal_fsa %>% 
  mutate(prop_age_50_over = na_if(prop_age_50_over, 0L)) %>% 
  tm_shape() + 
  tm_polygons(
    col = "prop_age_50_over"
    , style = "jenks"
    , palette = "YlOrBr"
    , border.alpha = 0.25
    )

# cut intervals
montreal_fsa <- montreal_fsa %>%
   mutate(
     intervals_age_50_over = cut(
       prop_age_50_over
       , breaks = c(0, 0.002, 0.004, 0.006, 0.007, 0.01, Inf)
       )
     , intervals_survey = cut(
       prop_survey
       , breaks = c(0, 0.002, 0.004, 0.006, 0.007, 0.01, Inf)
       )
     )

tmfsa_census <- tm_shape(montreal_fsa) +
   tm_polygons(
     col = "intervals_age_50_over"
     , palette = "YlOrBr"
     , border.alpha = 0.25
     , title = "prop_age_50_over"
     )

tmfsa_survey <- tm_shape(montreal_fsa) +
   tm_polygons(
     col = "intervals_survey"
     , palette = "YlOrBr"
     , border.alpha = 0.25
     , title = "prop_survey"
     )

# tmct_survey <- montreal_cd_ct %>% 
#   mutate(prop_survey = na_if(prop_survey, 0L)) %>% 
#   tm_shape() + 
#   tm_polygons(
#     col = "prop_survey"
#     , style = "jenks"
#     , palette = "YlOrBr"
#     , border.alpha = 0.25
#     )
# 
# tmct_survey <- tm_shape(montreal_cd_ct) + 
#   tm_fill(col = "intervals", palette = "YlOrBr", title = "prop_survey")

# get island's centroid
# montreal_union <- montreal_cd_ct %>% 
#   mutate(all = "all") %>% 
#   group_by(all) %>% 
#   summarise() %>% 
#   ungroup()
# 
# montreal_centroid <- sf::st_centroid(montreal_union)
# 
# tm2 <- tm2 + tm_shape(montreal_centroid) + tm_dots(size = 0.125)

tmap_arrange(tmfsa_census, tmfsa_survey)
```



```{r}
#| warning: false
# old way
# # plot spatial distributions
# tmfsa_census <- montreal_fsa %>% 
#   mutate(prop_age_50_over = dplyr::na_if(prop_age_50_over, 0L)) %>% 
#   tm_shape() + 
#   tm_polygons(
#     col = "prop_age_50_over"
#     , style = "jenks"
#     , palette = "YlOrBr"
#     , border.alpha = 0.25
#     )
# 
# tmfsa_survey <- montreal_fsa %>% 
#   mutate(prop_survey = na_if(prop_survey, 0L)) %>% 
#   tm_shape() + 
#   tm_polygons(
#     col = "prop_survey"
#     , style = "jenks"
#     , palette = "YlOrBr"
#     , border.alpha = 0.25
#     )
# 
# 
# tmap_arrange(tmfsa_census, tmfsa_survey)
```

# Compare CT and FSA spatial distributions

```{r}
#| warning: false
# plot spatial distributions
tm_ct_fsa <- tmap_arrange(tmct_census, tmct_survey, tmfsa_census, tmfsa_survey, ncol = 2)

# save map
tmap_save(
  tm_ct_fsa
  , filename = "figures/proportion_census_survey_ct_fsa.png"
  # , width = 1000, height = 750, dpi = 900
  )
```

# Check flagged observations

The total number of flagged observations is 15.
The maximum frequency of flagged observations (either "FSA", which indicates that the geocoding was assigned to the centroid of the FSA, or "ParallelStreets", which indicates the middle point between the corridor provided by google) for CTs or FSA is one.
Thus, bad geocoding or spatial clutterin of flagged observations doesn't appear to be an issue for CT or FSA.

```{r}
# Count the number of flagged observations in each CT
montreal_cd_ct <- montreal_cd_ct %>% 
  mutate(
    count_flagged = lengths(
      sf::st_intersects(
        montreal_cd_ct
        , survey_filter_cd %>% filter(flags %in% c("FSA", "ParallelStreets"))
        )
      )
  )

montreal_fsa <- montreal_fsa %>% 
  mutate(
    count_flagged = lengths(
      sf::st_intersects(
        montreal_fsa
        , survey_filter_cd %>% filter(flags %in% c("FSA", "ParallelStreets"))
        )
      )
  )
```



Plot flagged observations against 
```{r}
tmct_flag <- montreal_cd_ct %>% 
  mutate(prop_survey = na_if(prop_survey, 0L)) %>% 
  tm_shape() + 
  tm_polygons(
    col = "prop_survey"
    , style = "jenks"
    , palette = "YlOrBr"
    , border.alpha = 0.25
    ) +
  tm_shape(survey_filter_cd %>% filter(flags%in% c("FSA","ParallelStreets"))) + 
  tm_dots()

tmfsa_flag <- montreal_fsa %>% 
  mutate(prop_survey = na_if(prop_survey, 0L)) %>% 
  tm_shape() + 
  tm_polygons(
    col = "prop_survey"
    , style = "jenks"
    , palette = "YlOrBr"
    , border.alpha = 0.25
    ) +
  tm_shape(survey_filter_cd %>% filter(flags%in% c("FSA","ParallelStreets"))) + 
  tm_dots()

tm_flag <- tmap_arrange(tmct_flag, tmfsa_flag)

# save map
tmap_save(
  tm_flag
  , filename = "figures/flagged_ct_fsa.png"
  # , width = 1000, height = 750, dpi = 900
  )
```

# Under/over representation map


```{r}
f_under_over <- function(df){
  df <- df %>% 
    # create under_over var
    mutate(under_over = prop_survey / prop_age_50_over)
  
    # create labels
  df <- df %>% 
    mutate(
      label_under_over = paste0(
      prop_survey %>% round(3)
      , "<br>"
      , "("
      , prop_age_50_over %>% round(3)
      , ")"
      )
    , label_survey = as.character(prop_survey %>% round(3))
    , label_census = paste0("(", prop_age_50_over %>% round(3), ")")
    )
  
}

montreal_cd_ct <- f_under_over(montreal_cd_ct)
montreal_fsa <- f_under_over(montreal_fsa)

```

```{r}
# plot data
tm_shape(montreal_fsa) + 
  tm_polygons(
    col = "under_over"
    , breaks = c(0,0.5, 0.99, 1.01, 2, Inf)
    , palette = "PuOr"
    , border.alpha = 0.25
    , alpha = 0.95
    , labels = c("0.00-0.50: Survey underrepresents","0.50-0.99", '0.99-1.01', '1.01-2.00', '2.00 or more: Survey overrepresents')
    , title = "Ratio: Survey/(Census)"
    ) + 
  tm_text(
    text = "label_survey"
    , size = 0.5
    # , col = "white"
    ) + 
  tm_shape(montreal_fsa) +
  tm_text(
      text = "label_census"
      , size = 0.5
      , ymod = -0.25
      # , col = "black"
  ) +
  tm_add_legend(
    type = "text"
  ) +
  tm_layout(
    legend.width = 2
    , main.title = "Ratio of the proportions of survey respondents vs. the population over 50 in each CT"
    , main.title.position = "center"
    , main.title.size = 1.05
  )
```

```{r}

```


# Save data

```{r}
sf::st_write(montreal_cd_ct, "data/report/montreal_cd_ct_count.gpkg", append = F)
sf::st_write(montreal_fsa, "data/report/montreal_fsa_count.gpkg", append = F)
sf::st_write(survey_filter_cd_fsa, "data/report/survey_filter_inside_cd.gpkg",
             append = F)
```
