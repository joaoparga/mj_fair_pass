---
title: "Mobilizing Justice: Montreal Fair Pass Pilot"
author:
  - name: João Pedro Figueira Amorim Parga
    orcid: 0000-0002-4105-5927
    email: joao.parga@mail.utoronto.ca
    affiliations:
      - name: Mobilizing Justice Partnership
format:
  docx: 
    reference-doc: custom-reference-doc.docx
    toc: false
    toc-depth: 2
    number-sections: true
  html:
    toc: true
    toc_float: true
    toc_depth: 2
    number_sections: true
    code_folding: hide
    theme: readable
    embed-resources: true
  pdf:
    fig-width: 6
    fig-asp: 0.618
    number-sections: true
    colorlinks: true
    keeptex: true
    include-in-header: 
      text: |
        \usepackage{booktabs}
        \usepackage{siunitx}
        \newcolumntype{d}{S[
            input-open-uncertainty=,
            input-close-uncertainty=,
            parse-numbers = false,
            table-align-text-pre=false,
            table-align-text-post=false
         ]}
date: "last-modified"
date-format: '[This version:] MMMM D, YYYY'
abstract: "This version contains only the updated tables and visualizations from the new report. The text can be found at the onedrive link."
csl: csl/american-sociological-association.csl
tbl-cap-location: top
number-sections: true
execute:
  echo: false
  warning: false
  message: false
  cache: false
editor:
  mode: source
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(cache = FALSE)
# Use cache = TRUE if you want to speed up compilation

knitr::opts_knit$set(output.format = "html")  # Set to "html" for HTML output

# A function to allow for showing some of the inline code
rinline <- function(code){
  html <- '<code  class="r">``` `r CODE` ```</code>'
  sub("CODE", code, html)
}
```

```{r packages}
#| echo: false
#| include: false
library(tidyverse)
library(sf)
library(data.table)
library(janitor)
library(fs)
library(cancensus)
library(tmap)
library(DataExplorer)
library(patchwork)
library(mapview)
library(modelsummary)
library(kableExtra)
library(knitr)
library(gt)
library(gtsummary)
library(conflicted)
library(stars)
library(showtext)
library(sysfonts)
library(hrbrthemes)
library(flextable)
library(rstatix)
library(openxlsx)
# library(Z.gtsummary.addons)

`%nin%` = Negate(`%in%`)

`%nlike%` = Negate(`%like%`)
```

```{r conflicts}
#| include: false
select <- dplyr::select
conflicted::conflicts_prefer(dplyr::filter)
```

```{r fonts}
#| include: false
#| # use different fonts
sysfonts::font_add_google("Roboto", "roboto")
showtext::showtext_auto()
```


```{r}
knitr::opts_chunk$set(tab.topcaption = TRUE)
```


# Read data

## Survey

```{r readdata}
#| include: false

load(file = "data/df_both_waves.RData")
df_full <- df_both
rm(df_both)
load(file = "data/list_count_trips_wave.RData")

```

### filter both waves only

```{r filter attrition}
# keep only respondents who answered both waves
df_attrition <- df_full %>% 
  filter(response_rate=="Started wave 2")

df_attrition <- df_attrition %>% 
  mutate(
    income_groups2 = case_when(
     income_groups %in% c(
       "$120,000 to $149,999"
       , "$150,000 to $179,999"
       , "$180,000 to $209,999"
       , "$210,000 or more"
     ) ~ "$120,000 or more"
      , .default = income_groups 
     )
  )

df_attrition <- df_attrition %>% 
  mutate(
    income_groups2 = factor(
      x = income_groups2
      , levels = c(
        "Less than $15,000"
        , "$15,000 to $29,999"
        , "$30,000 to $59,999"
        , "$60,000 to $89,999"
        , "$90,000 to $119,999"
        , "$120,000 or more"
      )
      , ordered = T
    )
  )
```



### change age_corrected (and, thus, age_groups_control_treat)
what to do with people age_raw = 65 and age_corrected = 64?
A: do not change age_corrected based on q4 (binary what is your age: 50-64 or 65+)

Obs.: I've changed 05_2_create_vars to remove the code that previously changed incorrectly 64 to 65 based on year of birth


<!-- ```{r} -->
<!-- df_both %>% filter(wave=="Second" & has_free_pass_wave2=="Yes" & age_groups_binary=="50-64") %>% count(age_raw, age_corrected) -->
<!-- ``` -->

## Statscan SAM (missing)

```{r}

```


# Define variables

## age histogram

age histogram
```{r}
df_attrition %>% filter(wave=="First") %>% ggplot(aes(x=age_corrected))+geom_histogram(binwidth = 1)+scale_x_continuous(breaks = seq(50,100,5))
```


## treatment and control

what to do with people 50-64 who declared having the free pass?

IMPORTANT: ON WAVE 1, Q97 (Do you currently have the Free 65+ fare loaded on your Opus card?) WAS ONLY ASKED TO PEOPLE 65+
i.e., 50-64 were not asked if they had the free card loaded on wave1

Resolução provisória para a formatação long da base dados

```{r}


df_second <- df_attrition %>% 
  filter(wave=="Second") %>% 
  mutate(
    treatment = case_when(
    age_groups_binary == "65+" & has_free_pass_wave2 == "No" ~ 0L
    , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ 1L
    , .default = NA_integer_
  )
  )

df_first <- df_attrition %>% 
  filter(wave=="First") %>% 
  mutate(treatment = case_when(
    response_id %in% setDT(df_second)[treatment==1L,response_id] ~ 1L
    , response_id %in% setDT(df_second)[treatment==0L,response_id] ~ 0L
    , .default = NA_integer_
  ))

df_both <- data.table::rbindlist(
  list(df_first,df_second)
)

# OUTROS TIPOS DE TREATMENT & CONTROL (o t_c4 foi usado acima)
# df_both <- df_both %>% mutate(
#   # only 65+
#   # control: t0: no pass; t1: no pass
#   # treat: t0: no pass, t1: pass
#     treatment_control_1 = case_when(
#     age_groups_binary == "65+" & 
#       has_free_pass_wave1 == "No" &
#       has_free_pass_wave2 == "No" ~ "group_1"
#     , age_groups_binary == "65+" & 
#       has_free_pass_wave1 == "No" &
#       has_free_pass_wave2 == "Yes" ~ "group_2"
#     , .default = NA_character_
#   )
#   , treatment_control_2 = case_when(
#     age_groups_binary == "50-64" ~ "group_1"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ "group_2"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "No" ~ "group_3"
#     , .default = NA_character_
#   )
#     , treatment_control_3 = case_when(
#     age_groups_binary == "50-64" ~ "group_1"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ "group_2"
#     , .default = NA_character_
#   )
#   # only 65+
#   # control: t0: whatever; t1: no pass
#   # treat: t0: whatever, t1: pass
#   , treatment_control_4 = case_when(
#     age_groups_binary == "65+" & has_free_pass_wave2 == "No" ~ "group_1"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ "group_2"
#     , .default = NA_character_
#   )
#   , treatment_control_5 = case_when(
#     age_groups_binary == "50-64" ~ "group_1"
#     , age_groups_binary == "65+" ~ "group_2"
#     , .default = NA_character_
#   )
# )
```

# filter by control/treatment

```{r}
df_tc <- df_both %>% filter(!is.na(treatment))
```


## outcomes

OK
- satisfaction with activity participation

- transit usage
- trip generation

OK
- subjective relationship to cost

```{r}
# relevel factors
df_tc <- df_tc %>% 
  mutate(
    satisfaction_activity_participation = fct_relevel(
      satisfaction_activity_participation
      , c("Dissatisfied","Neither", "Satisfied"))
    )
```


### change in satisfaction activity

```{r}
df_outcome_participation <- df_tc %>% 
  select(
    response_id,wave,treatment,
    satisfaction_activity_participation
    , q109_3, q109_4, q109_5
    ) %>% 
  pivot_wider(
    id_cols = c("response_id","treatment")
    , names_from = wave
    , values_from = c(satisfaction_activity_participation,q109_3, q109_4, q109_5)
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

df_outcome_participation <- df_outcome_participation %>% 
  mutate(
    delta_satisfaction_activity_lvls = case_when(
      satisfaction_activity_participation_first == "Dissatisfied" &
        satisfaction_activity_participation_second == "Neither" ~ 1L
      , satisfaction_activity_participation_first == "Neither" &
        satisfaction_activity_participation_second == "Satisfied" ~ 1L
      , satisfaction_activity_participation_first == "Dissatisfied" &
        satisfaction_activity_participation_second == "Satisfied" ~ 2L
      , satisfaction_activity_participation_first == 
        satisfaction_activity_participation_second ~ 0L
      , satisfaction_activity_participation_first == "Satisfied" & 
        satisfaction_activity_participation_second == "Neither" ~ -1L
      , satisfaction_activity_participation_first == "Neither" & 
        satisfaction_activity_participation_second == "Dissatisfied" ~ -1L
      , satisfaction_activity_participation_first == "Satisfied" & 
        satisfaction_activity_participation_second == "Dissatisfied" ~ -2L
      , .default = NA_integer_
    )
    , delta_satisfaction_activity_bin = case_when(
      delta_satisfaction_activity_lvls < 0L ~ -1L
      , delta_satisfaction_activity_lvls == 0L ~ 0L
      , delta_satisfaction_activity_lvls > 0L ~ 1L
      , .default = NA_integer_
    )
    ,   delta_satisfaction_activity_bin2 = case_when(
      satisfaction_activity_participation_first %in% c("Dissatisfied", "Neither") &
        satisfaction_activity_participation_second == "Satisfied" ~ 1L
      , satisfaction_activity_participation_first == satisfaction_activity_participation_second ~ 0L
      , satisfaction_activity_participation_first %in% c("Neither","Satisfied") & 
        satisfaction_activity_participation_second == "Dissatisfied" ~ -1L
      , satisfaction_activity_participation_first == "Dissatisfied" &
        satisfaction_activity_participation_second == "Neither" ~ 0L
      , satisfaction_activity_participation_first == "Satisfied" &
        satisfaction_activity_participation_second == "Neither" ~ 0L
      , .default = NA_integer_
    )
  , delta_satisfaction_friends_family = case_when(
    q109_3_first == "Strongly Disagree" &
      q109_3_second %in% c(
        "Disagree"
        ,"Neither agree nor disagree"
        ,"Agree"
        , "Strongly Agree") ~ 1L
    , q109_3_first == "Disagree" &
      q109_3_second %in% c(
        "Neither agree nor disagree"
        ,"Agree"
        , "Strongly Agree") ~ 1L
    , q109_3_first == "Neither agree nor disagree" &
      q109_3_second %in% c(
        "Agree"
        , "Strongly Agree") ~ 1L
    , q109_3_first == "Agree" &
      q109_3_second %in% c("Strongly Agree") ~ 1L
    , q109_3_first == q109_3_second ~ 0L
    , q109_3_first == "Strongly Agree" &
      q109_3_second %in% c(
        "Strongly Disagree"
        , "Disagree"
        ,"Neither agree nor disagree"
        , "Agree") ~ -1L
    , q109_3_first == "Agree" &
      q109_3_second %in% c(
        "Strongly Disagree"
        , "Disagree"
        ,"Neither agree nor disagree") ~ -1L
    , q109_3_first == "Neither agree nor disagree" &
      q109_3_second %in% c(
        "Strongly Disagree"
        , "Disagree") ~ -1L
    , q109_3_first == "Disagree" &
      q109_3_second %in% c("Strongly Disagree") ~ -1L
    , .default = NA_integer_
    )
  , delta_satisfaction_recreation = case_when(
  q109_4_first == "Strongly Disagree" &
    q109_4_second %in% c(
      "Disagree"
      ,"Neither agree nor disagree"
      ,"Agree"
      , "Strongly Agree") ~ 1L
  , q109_4_first == "Disagree" &
    q109_4_second %in% c(
      "Neither agree nor disagree"
      ,"Agree"
      , "Strongly Agree") ~ 1L
  , q109_4_first == "Neither agree nor disagree" &
    q109_4_second %in% c(
      "Agree"
      , "Strongly Agree") ~ 1L
  , q109_4_first == "Agree" &
    q109_4_second %in% c("Strongly Agree") ~ 1L
  , q109_4_first == q109_4_second ~ 0L
  , q109_4_first == "Strongly Agree" &
    q109_4_second %in% c(
      "Strongly Disagree"
      , "Disagree"
      ,"Neither agree nor disagree"
      , "Agree") ~ -1L
  , q109_4_first == "Agree" &
    q109_4_second %in% c(
      "Strongly Disagree"
      , "Disagree"
      ,"Neither agree nor disagree") ~ -1L
  , q109_4_first == "Neither agree nor disagree" &
    q109_4_second %in% c(
      "Strongly Disagree"
      , "Disagree") ~ -1L
  , q109_4_first == "Disagree" &
    q109_4_second %in% c("Strongly Disagree") ~ -1L
  , .default = NA_integer_
  )
  , delta_satisfaction_attend_events = case_when(
  q109_5_first == "Strongly Disagree" &
    q109_5_second %in% c(
      "Disagree"
      ,"Neither agree nor disagree"
      ,"Agree"
      , "Strongly Agree") ~ 1L
  , q109_5_first == "Disagree" &
    q109_5_second %in% c(
      "Neither agree nor disagree"
      ,"Agree"
      , "Strongly Agree") ~ 1L
  , q109_5_first == "Neither agree nor disagree" &
    q109_5_second %in% c(
      "Agree"
      , "Strongly Agree") ~ 1L
  , q109_5_first == "Agree" &
    q109_5_second %in% c("Strongly Agree") ~ 1L
  , q109_5_first == q109_5_second ~ 0L
  , q109_5_first == "Strongly Agree" &
    q109_5_second %in% c(
      "Strongly Disagree"
      , "Disagree"
      ,"Neither agree nor disagree"
      , "Agree") ~ -1L
  , q109_5_first == "Agree" &
    q109_5_second %in% c(
      "Strongly Disagree"
      , "Disagree"
      ,"Neither agree nor disagree") ~ -1L
  , q109_5_first == "Neither agree nor disagree" &
    q109_5_second %in% c(
      "Strongly Disagree"
      , "Disagree") ~ -1L
  , q109_5_first == "Disagree" &
    q109_5_second %in% c("Strongly Disagree") ~ -1L
  , .default = NA_integer_
)
  )



```

### change in relationship to cost

```{r}
df_tc <- df_tc %>% 
  mutate(
  difficulty_transport_expenses = factor(
    difficulty_transport_expenses
    , levels = c("No", "Neither", "Yes")
    , ordered = T
  )
  , q103 = factor(
    q103
    , levels = c(
      "Extremely difficult"
      , "Somewhat difficult"
      , "Neither easy nor difficult"
      , "Somewhat easy"
      , "Extremely easy"
    )
    , ordered = T
  )
)

df_outcome_cost <- df_tc %>% 
  select(
    response_id,wave,treatment
# Has the cost of transit ever prevented you from taking a trip using public transit?    
    , q101
# Would you say you are riding transit as much as you would like?
    , q100
# q25 asked only to those who answered Yes to q100
# derived from q25: What prevents you from using transit as much as you would like
# if answer is i) nor worth the cost; or ii) i can't afford it
    , transit_barrier_cost_related
# q103 In the last 12 months, how easy or difficult has it been for you to meet your transportation expenses?
    , q103
    , difficulty_transport_expenses
    ) %>% 
  pivot_wider(
    id_cols = c("response_id","treatment")
    , names_from = wave
    , values_from = c(q100, q101, transit_barrier_cost_related
                      , q103, difficulty_transport_expenses)
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

df_outcome_cost <- df_outcome_cost %>% 
  mutate(
    delta_rides_enough_transit = case_when(
      q100_first == q100_second ~ 0L
      
      , q100_first == "No" &
        q100_second == "Yes" ~ 1L
      
      , q100_first == "Yes" &
        q100_second == "No" ~ -1L
      
      , .default = NA_integer_
    )
    , delta_cost_prevented_transit = case_when(
      q101_first == q101_second ~ 0L
      
      , q101_first == "No" &
        q101_second == "Yes" ~ 1L
      
      , q101_first == "Yes" &
        q101_second == "No" ~ -1L
      
      , .default = NA_integer_
    )
    , delta_transit_barrier_cost = case_when(
      transit_barrier_cost_related_first == transit_barrier_cost_related_second ~ 0L
      , transit_barrier_cost_related_first == "No" &
        transit_barrier_cost_related_second == "Yes" ~ 1L
      , transit_barrier_cost_related_first == "Yes" &
        transit_barrier_cost_related_second == "No" ~ -1L
      , .default = NA_integer_
    )
    # , delta_difficult_bin = case_when(
    #   difficulty_transport_expenses_first == 
    #     difficulty_transport_expenses_second ~ 0L
    #   , difficulty_transport_expenses_first < 
    #     difficulty_transport_expenses_second ~ 1L
    #   , difficulty_transport_expenses_first >
    #     difficulty_transport_expenses_second ~ -1L
    #   , .default = NA_integer_
    # )
    # , delta_difficult_bin2 = case_when(
    #   difficulty_transport_expenses_first == 
    #     difficulty_transport_expenses_second ~ 0L
    #   
    #   , difficulty_transport_expenses_first == "No" &
    #     difficulty_transport_expenses_second %in% c("Neither","Yes") ~ 1L
    #   
    #   , difficulty_transport_expenses_first == "Neither" &
    #     difficulty_transport_expenses_second == "Yes" ~ 1L
    #   
    #   , difficulty_transport_expenses_first == "Yes" &
    #     difficulty_transport_expenses_second %in% c("Neither", "No") ~ -1L
    #   
    #   , difficulty_transport_expenses_first == "Neither" &
    #     difficulty_transport_expenses_second == "No" ~ -1L
    #   , .default = NA_integer_
    # )
    , delta_difficult_broad = case_when(
      q103_first == q103_second ~ 0L
      , q103_first < q103_second ~ 1L
      , q103_first > q103_second ~ -1L
      , .default = NA_integer_
    )
  )
  
```

### count trips wave

```{r}
df_outcome_trips <- df_tc %>% 
  select(
    response_id,wave,treatment,
    starts_with("count")
    , -c("count_trips_total")
    ) %>% 
  pivot_wider(
    id_cols = c("response_id","treatment")
    , names_from = wave
    , values_from = starts_with("count")
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

colunas <- df_tc %>%
  select(starts_with("count"), , -c("count_trips_total")) %>% 
  colnames() %>% 
  str_extract("(?<=count_).*")

df_outcome_trips[paste0("delta_", colunas)] <- 
  map2(
    df_outcome_trips %>% select(ends_with("first"))
    , df_outcome_trips %>% select(ends_with("second"))
    ,~.x - .y
    )

```


<!-- ```{r} -->
<!-- # https://stackoverflow.com/a/68032070 -->
<!-- df_outcome_trips <- df_both -->

<!-- setDT(df_outcome_trips)[ -->
<!--   , -->
<!--   diff_trips_wave := count_trips_wave - shift(count_trips_wave) -->
<!--   , by = .(response_id) -->
<!-- ] -->
<!-- ``` -->

### used active or transit as main_type?

```{r}
df_outcome_main <- df_tc %>% 
  select(
    response_id,wave,treatment
    # ,main_dest
    , main_mode
    , main_type
    ) %>% 
  pivot_wider(
    id_cols = c("response_id","treatment")
    , names_from = wave
    , values_from = starts_with("main")
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

df_outcome_main <- df_outcome_main %>% 
  mutate(
    delta_type = case_when(
      main_type_first == main_type_second ~ 0L
      , main_type_first == "transit" &
        main_type_second %nin% c("transit") ~ -1L
      , main_type_first %nin% c("transit") &
        main_type_second %in% c("transit") ~ 1L
      , .default = NA_integer_
    )
    , new_type = case_when(
      main_type_first == main_type_second ~ "same"
      
      , (main_type_first != "active" |
        is.na(main_type_first)) &
        main_type_second == "active" ~ "new_active"
      
      , (main_type_first != "car" |
        is.na(main_type_first)) &
        main_type_second == "car" ~ "new_car"
      
      , (main_type_first != "transit" |
        is.na(main_type_first)) &
        main_type_second == "transit" ~ "new_transit"
      
      , (main_type_first != "other" |
        is.na(main_type_first)) &
        main_type_second == "other" ~ "new_other"
      
      , .default = NA_character_
    )
    
    # , delta_type_broad = case_when(
    #   main_type_first == main_type_second ~ 0L
    #   , main_type_first %in% c("active","transit") &
    #     main_type_second == "car" ~ -1L
    #   , main_type_first == "car" &
    #     main_type_second %in% c("active","transit") ~ 1L
    #   , .default = NA_integer_
    # )
    # , delta_type_strict = case_when(
    #   main_type_first == main_type_second ~ "same"
    #   , main_type_first %in% c("car", "active", "other") &
    #     main_type_second == "transit" ~ "transit"
    #   , main_type_first %in% c("transit", "active", "other") &
    #     main_type_second == "car" ~ "car"
    #   , main_type_first %in% c("car", "active", "other") &
    #     main_type_second == "active" ~ "active"
    #   , main_type_first %in% c("car", "active", "transit") &
    #     main_type_second == "other" ~ "other"
    #   , .default = NA_character_
    # )
  )
  
```



# Descriptive analysis

## constant demographics

```{r}
# treatment
desc_age <- df_tc %>% 
  dplyr::filter(wave == "First") %>% 
  mutate(treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)) %>% 
  select(
    # wave
    treatment
    , age_groups_5_all
  # , visible_minority
  # , immigrant
  # , gender
  # , educ_has_postsec
) %>% 
  mutate(
    age_groups_5_all = forcats::fct_drop(
      age_groups_5_all
      , only = c("age_50_54","age_55_59", "age_60_64")
      )
    , age_groups_5_all = forcats::fct_recode(
      age_groups_5_all
      , `Age 65-69` = "age_65_69"
      , `Age 70-74` = "age_70_74"
      , `Age 75-79` = "age_75_79"
      , `Age 80-84` = "age_80_84"
      , `Age 85-89` = "age_85_89"
      , `Age 90 and over` = "age_90_over"
    )
  ) %>% 
    mutate(
    across(
      .cols = -one_of("treatment")
      # don't change fct below for newer one
      , ~ forcats::fct_explicit_na(.x)
      )
  ) %>% 
  rename(
    # "Visible minority" = visible_minority
    # , "Is Immigrant" = immigrant
    # , "Gender" = gender
    # , "Has post-secondary education" = educ_has_postsec
    , "Treatment" = treatment
    , "Age groups (5 years intervals)" = age_groups_5_all
  ) %>% 
      gtsummary::tbl_summary(
        type = gtsummary::all_dichotomous() ~ "categorical"
        , sort = list(
          # `Treatment` ~ "frequency"
           `Age groups (5 years intervals)` ~ "alphanumeric"
        )
        # all_categorical() ~ "frequency"
        # , missing = "always"
        , missing_text = "Missing"
        , missing_stat = "{p_miss}%"
        , by = `Treatment`
        , statistic = all_categorical() ~ "{p}%"
      ) %>% 
        gtsummary::add_overall(last = T, 
                             # col_label = "Total, N = {N}"
                             ) %>%
      gtsummary::modify_caption(caption = "Descriptive statistics for categorical variables") %>% 
  # gtsummary::modify_header() %>% 
  gtsummary::as_tibble()



openxlsx::write.xlsx(desc_age, "output/df_age.xlsx")
```

```{r}
desc_constant <- df_tc %>% 
  dplyr::filter(wave == "First") %>% 
  mutate(treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)) %>% 
  select(
    # wave
    treatment
  , visible_minority
  , immigrant
  , gender
  , educ_has_postsec
) %>% 
    mutate(
    across(
      .cols = -one_of("treatment")
      # don't change fct below for newer one
      , ~ forcats::fct_explicit_na(.x)
      )
  ) %>% 
  rename(
    "Visible minority" = visible_minority
    , "Is Immigrant" = immigrant
    , "Gender" = gender
    , "Has post-secondary education" = educ_has_postsec
    , "Treatment" = treatment
  ) %>% 
      gtsummary::tbl_summary(
        type = gtsummary::all_dichotomous() ~ "categorical"
        , sort = list(
          `Visible minority` ~ "frequency"
          , `Is Immigrant` ~ "frequency"
          , `Gender` ~ "frequency"
          , `Has post-secondary education` ~ "frequency"
        )
        # all_categorical() ~ "frequency"
        # , missing = "always"
        , missing_text = "Missing"
        , missing_stat = "{p_miss}%"
        , by = `Treatment`
        , statistic = all_categorical() ~ "{p}%"
      ) %>% 
      gtsummary::add_overall(last = T, 
                             # col_label = "Total, N = {N}"
                             ) %>%
      gtsummary::modify_caption(caption = "Descriptive statistics for categorical variables") %>% 
  # gtsummary::modify_header() %>% 
  gtsummary::as_tibble()



openxlsx::write.xlsx(desc_constant, "output/df_constant_demographics.xlsx")
```

## time-variant demographics

```{r}
desc_variant <- df_tc %>% 
  dplyr::filter(wave == "First") %>% 
  mutate(treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)) %>% 
  select(
    # wave
    treatment
    , any_mobility_limitation
    # , any_functional_limitation
    , employment
    , income_groups2
    , in_lim
    , has_vehicle_household
) %>% 
    mutate(
    across(
      .cols = -one_of("treatment")
      # don't change fct below for newer one
      , ~ forcats::fct_explicit_na(.x)
      )
  ) %>% 
  rename(
    "Any mobility limitation" = any_mobility_limitation
    # , "Any functional limitation" = any_functional_limitation
    , "Employment" = employment
    , "Annual income groups" = income_groups2
    , "Household below LIM" = in_lim
    , "Has Vehicle in Household" = has_vehicle_household
    , "Treatment" = treatment
  ) %>% 
      gtsummary::tbl_summary(
        type = gtsummary::all_dichotomous() ~ "categorical"
        , sort = list(
          `Any mobility limitation` ~ "frequency"
          , `Employment` ~ "frequency"
          , `Annual income groups` ~ "frequency"
          , `Household below LIM` ~ "frequency"
          , `Has Vehicle in Household` ~ "frequency"
        )
        # all_categorical() ~ "frequency"
        # , missing = "always"
        , missing_text = "Missing"
        , missing_stat = "{p_miss}%"
        , by = `Treatment`
        , statistic = all_categorical() ~ "{p}%"
      ) %>% 
      gtsummary::add_overall(last = T, 
                             # col_label = "Total, N = {N}"
                             ) %>%
      gtsummary::modify_caption(caption = "Descriptive statistics for categorical variables") %>% 
  # gtsummary::modify_header() %>% 
  gtsummary::as_tibble()



openxlsx::write.xlsx(desc_variant, "output/df_variant_demographics.xlsx")
```


# fisher exact test

## continuous variable (detla trips)

```{r}
simul_stat <- as.vector(NULL)
set.seed(1001)

df_fisher_continuous <- df_outcome_trips %>% 
  select(treatment, delta_trips_wave)

for(i in 1:557) {
  print(i)
  df_fisher_continuous$rand <- runif(557,min=-159,max=178)
  df_fisher_continuous$treatment_rand <- as.numeric(rank(df_fisher_continuous$rand)<=480)
  df_fisher_continuous$control_rand = 1-df_fisher_continuous$treatment_rand
  simul_stat <- append(simul_stat,
                       sum(df_fisher_continuous$treatment_rand*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$treatment_rand) 
                       - sum(df_fisher_continuous$control_rand*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$control_rand))
}

df_fisher_continuous$control = 1-df_fisher_continuous$treatment
actual_stat <- sum(df_fisher_continuous$treatment*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$treatment) - 
  sum(df_fisher_continuous$control*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$control)
actual_stat
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)


#Printing the ATE
ate <- actual_stat
ate

control_mean <- sum(df_fisher_continuous$control*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$control)
treatment_mean <- sum(df_fisher_continuous$treatment*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$treatment)


# average variance in control
s_c <- (1/(sum(df_fisher_continuous$control)-1))*sum(((df_fisher_continuous$delta_trips_wave-control_mean)*df_fisher_continuous$control)^2)
s_c
# average variance in treatment
s_t <- (1/(sum(df_fisher_continuous$treatment)-1))*sum(((df_fisher_continuous$delta_trips_wave-treatment_mean)*df_fisher_continuous$treatment)^2)
s_t

Vneyman <- (s_c/sum(df_fisher_continuous$control) + s_t/sum(df_fisher_continuous$treatment))
print(sqrt(Vneyman))

# t_value
print(actual_stat/sqrt(Vneyman))

# lower limit
print(actual_stat-1.96*sqrt(Vneyman))
# higher limit
print(actual_stat+1.96*sqrt(Vneyman))

```




## q101 (cost ever prevented using transit)

```{r}
# cost prevented transit
rstatix::pairwise_fisher_test(
  xtab = table(
    df_outcome_cost$treatment
    ,df_outcome_cost$delta_cost_prevented_transit
    )
  , p.adjust.method = "fdr"
)

rstatix::row_wise_fisher_test(
  xtab = table(
    df_outcome_cost$treatment
    ,df_outcome_cost$delta_cost_prevented_transit
    ) %>% t()
  , p.adjust.method = "fdr"
)

rstatix::pairwise_fisher_test(
  xtab = table(
    df_outcome_cost$treatment
    ,df_outcome_cost$delta_rides_enough_transit
    )
  , p.adjust.method = "fdr"
)

```


<!-- ```{r} -->
<!-- # two options -->
<!-- df_q101 <- df_both %>% filter(wave=="Second" & q101!="Prefer not to answer") -->

<!-- stats::fisher.test(table(df_q101$treatment_control_4, df_q101$q101)) -->

<!-- # or -->
<!-- df <- data.frame( -->
<!--   "q101_no" = c(71, 353) -->
<!--   ,"q101_yes" = c(6, 122) -->
<!--   ,row.names = c("control", "treatment")  -->
<!--   , stringsAsFactors = F -->
<!-- ) -->
<!-- stats::fisher.test(df) -->

<!-- ``` -->


## diff trips per wave

```{r}

df_diff_trips_wave <- df_both %>% 
  filter(wave=="Second")


stats::fisher.test(table(
  df_diff_trips_wave$treatment_control_4
  , df_diff_trips_wave$diff_trips_wave)
  , simulate.p.value = T
  , B = 100000L
  )

```

# multivariate model




